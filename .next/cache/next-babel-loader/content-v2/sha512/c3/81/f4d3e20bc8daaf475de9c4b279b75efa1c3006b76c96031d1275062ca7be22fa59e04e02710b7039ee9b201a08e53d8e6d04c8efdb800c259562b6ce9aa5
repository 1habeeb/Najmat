{"ast":null,"code":"var _jsxFileName = \"/Users/i0h1m/Desktop/najmat-nextjs - - - DON'T/najmat with-mongodb/pages/Process.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport Layout from '../compoenets/layout';\nimport { connectToDatabase } from \"../util/mongodb\";\nexport default function Top({\n  movies\n}) {\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, \"Top 1000 Movies of All Time\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }, __jsx(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, \"(According to Metacritic)\")), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, movies.map(movie => __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 11\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }, movie.title), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, movie.metacritic), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, movie.plot)))));\n}\nexport async function getStaticProps() {\n  const {\n    db\n  } = await connectToDatabase();\n  const movies = await db.collection(\"movies\").find({}).sort({\n    metacritic: -1\n  }).limit(10).toArray();\n  return {\n    props: {\n      movies: JSON.parse(JSON.stringify(movies))\n    }\n  };\n}","map":{"version":3,"sources":["/Users/i0h1m/Desktop/najmat-nextjs - - - DON'T/najmat with-mongodb/pages/Process.js"],"names":["useState","Layout","connectToDatabase","Top","movies","map","movie","title","metacritic","plot","getStaticProps","db","collection","find","sort","limit","toArray","props","JSON","parse","stringify"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AAEA,eAAe,SAASC,GAAT,CAAa;AAAEC,EAAAA;AAAF,CAAb,EAAyB;AACtC,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,CAFF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,MAAM,CAACC,GAAP,CAAYC,KAAD,IACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAK,CAACC,KAAX,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,KAAK,CAACE,UAAX,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIF,KAAK,CAACG,IAAV,CAHF,CADD,CADH,CALF,CADF;AAiBD;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAS,MAAMT,iBAAiB,EAAtC;AAEA,QAAME,MAAM,GAAG,MAAMO,EAAE,CACpBC,UADkB,CACP,QADO,EAElBC,IAFkB,CAEb,EAFa,EAGlBC,IAHkB,CAGb;AAAEN,IAAAA,UAAU,EAAE,CAAC;AAAf,GAHa,EAIlBO,KAJkB,CAIZ,EAJY,EAKlBC,OALkB,EAArB;AAOA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLb,MAAAA,MAAM,EAAEc,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAehB,MAAf,CAAX;AADH;AADF,GAAP;AAKD","sourcesContent":["import { useState } from \"react\"\nimport Layout from '../compoenets/layout'\nimport { connectToDatabase } from \"../util/mongodb\";\n\nexport default function Top({ movies }) {\n  return (\n    <Layout>\n      <h1>Top 1000 Movies of All Time</h1>\n      <p>\n        <small>(According to Metacritic)</small>\n      </p>\n      <ul>\n        {movies.map((movie) => (\n          <li>\n            <h2>{movie.title}</h2>\n            <h3>{movie.metacritic}</h3>\n            <p>{movie.plot}</p>\n          </li>\n        ))}\n      </ul>\n    </Layout>\n  );\n}\n\nexport async function getStaticProps() {\n  const { db } = await connectToDatabase();\n\n  const movies = await db\n    .collection(\"movies\")\n    .find({})\n    .sort({ metacritic: -1 })\n    .limit(10)\n    .toArray();\n\n  return {\n    props: {\n      movies: JSON.parse(JSON.stringify(movies)),\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}