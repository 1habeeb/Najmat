{"code":"_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[19],{Dsvi:function(e,r,t){\"use strict\";t.r(r);var n=t(\"q1tI\"),s=t.n(n),c=(t(\"Aiso\"),e=>e instanceof HTMLElement);const i=\"blur\",a=\"change\",u=\"input\",o=\"onBlur\",l=\"onChange\",f=\"onSubmit\",d=\"onTouched\",b=\"all\",g=\"undefined\",v=\"max\",h=\"min\",m=\"maxLength\",y=\"minLength\",O=\"pattern\",p=\"required\",j=\"validate\";var w=e=>null==e;const V=e=>\"object\"===typeof e;var S=e=>!w(e)&&!Array.isArray(e)&&V(e)&&!(e instanceof Date),A=e=>/^\\w*$/.test(e),x=e=>e.filter(Boolean),C=e=>x(e.replace(/[\"|']/g,\"\").replace(/\\[/g,\".\").replace(/\\]/g,\"\").split(\".\"));function k(e,r,t){let n=-1;const s=A(r)?[r]:C(r),c=s.length,i=c-1;for(;++n<c;){const r=s[n];let c=t;if(n!==i){const t=e[r];c=S(t)||Array.isArray(t)?t:isNaN(+s[n+1])?{}:[]}e[r]=c,e=e[r]}return e}var R=(e,r={})=>{for(const t in e)A(t)?r[t]=e[t]:k(r,t,e[t]);return r},N=e=>void 0===e,M=(e={},r,t)=>{const n=x(r.split(/[,[\\].]+?/)).reduce(((e,r)=>w(e)?e:e[r]),e);return N(n)||n===e?N(e[r])?t:e[r]:n},E=(e,r)=>{c(e)&&e.removeEventListener&&(e.removeEventListener(u,r),e.removeEventListener(a,r),e.removeEventListener(i,r))};const D={isValid:!1,value:null};var F=e=>Array.isArray(e)?e.reduce(((e,r)=>r&&r.ref.checked?{isValid:!0,value:r.ref.value}:e),D):D,B=e=>\"radio\"===e.type,L=e=>\"file\"===e.type,H=e=>\"checkbox\"===e.type,T=e=>\"select-multiple\"===e.type;const _={value:!1,isValid:!1},z={value:!0,isValid:!0};var W=e=>{if(Array.isArray(e)){if(e.length>1){const r=e.filter((e=>e&&e.ref.checked)).map((({ref:{value:e}})=>e));return{value:r,isValid:!!r.length}}const{checked:r,value:t,attributes:n}=e[0].ref;return r?n&&!N(n.value)?N(t)||\"\"===t?z:{value:t,isValid:!0}:z:_}return _};function q(e,r,t,n,s){const c=e.current[r];if(c){const{ref:{value:e,disabled:r},ref:t,valueAsNumber:a,valueAsDate:u,setValueAs:o}=c;if(r&&n)return;return L(t)?t.files:B(t)?F(c.options).value:T(t)?(i=t.options,[...i].filter((({selected:e})=>e)).map((({value:e})=>e))):H(t)?W(c.options).value:s?e:a?\"\"===e?NaN:+e:u?t.valueAsDate:o?o(e):e}var i;if(t)return M(t.current,r)}function P(e){return!e||e instanceof HTMLElement&&e.nodeType!==Node.DOCUMENT_NODE&&P(e.parentNode)}var $=e=>S(e)&&!Object.keys(e).length,X=e=>\"boolean\"===typeof e;function I(e,r){const t=A(r)?[r]:C(r),n=1==t.length?e:function(e,r){const t=r.slice(0,-1).length;let n=0;for(;n<t;)e=N(e)?n++:e[r[n++]];return e}(e,t),s=t[t.length-1];let c;n&&delete n[s];for(let i=0;i<t.slice(0,-1).length;i++){let r,n=-1;const s=t.slice(0,-(i+1)),a=s.length-1;for(i>0&&(c=e);++n<s.length;){const t=s[n];r=r?r[t]:e[t],a===n&&(S(r)&&$(r)||Array.isArray(r)&&!r.filter((e=>S(e)&&!$(e)||X(e))).length)&&(c?delete c[t]:delete e[t]),c=r}}return e}const J=(e,r)=>e&&e.ref===r;var U=e=>w(e)||!V(e);function G(e,r){if(U(e)||U(r))return r;for(const n in r){const s=e[n],c=r[n];try{e[n]=S(s)&&S(c)||Array.isArray(s)&&Array.isArray(c)?G(s,c):c}catch(t){}}return e}function K(e,r,t){if(U(e)||U(r)||e instanceof Date||r instanceof Date)return e===r;if(!Object(n.isValidElement)(e)){const n=Object.keys(e),s=Object.keys(r);if(n.length!==s.length)return!1;for(const c of n){const n=e[c];if(!t||\"ref\"!==c){const e=r[c];if((S(n)||Array.isArray(n))&&(S(e)||Array.isArray(e))?!K(n,e,t):n!==e)return!1}}}return!0}function Q(e,r,t,n,s){let c=-1;for(;++c<e.length;){for(const n in e[c])Array.isArray(e[c][n])?(!t[c]&&(t[c]={}),t[c][n]=[],Q(e[c][n],M(r[c]||{},n,[]),t[c][n],t[c],n)):K(M(r[c]||{},n),e[c][n])?k(t[c]||{},n):t[c]=Object.assign(Object.assign({},t[c]),{[n]:!0});n&&!t.length&&delete n[s]}return t}var Y=(e,r,t)=>G(Q(e,r,t.slice(0,e.length)),Q(r,e,t.slice(0,e.length))),Z=e=>\"string\"===typeof e,ee=(e,r,t,n,s)=>{const c={};for(const i in e.current)(N(s)||(Z(s)?i.startsWith(s):Array.isArray(s)&&s.find((e=>i.startsWith(e)))))&&(c[i]=q(e,i,void 0,n));return t?R(c):G(r,R(c))},re=e=>e instanceof RegExp,te=e=>S(e)&&!re(e)?e:{value:e,message:\"\"},ne=e=>\"function\"===typeof e,se=e=>Z(e)||Object(n.isValidElement)(e);function ce(e,r,t=\"validate\"){if(se(e)||X(e)&&!e)return{type:t,message:se(e)?e:\"\",ref:r}}var ie=(e,r,t,n,s)=>r?Object.assign(Object.assign({},t[e]),{types:Object.assign(Object.assign({},t[e]&&t[e].types?t[e].types:{}),{[n]:s||!0})}):{},ae=async(e,r,{ref:t,ref:{value:n},options:s,required:c,maxLength:i,minLength:a,min:u,max:o,pattern:l,validate:f},d)=>{const b=t.name,g={},V=B(t),A=H(t),x=V||A,C=\"\"===n,k=ie.bind(null,b,r,g),R=(e,r,n,s=m,c=y)=>{const i=e?r:n;g[b]=Object.assign({type:e?s:c,message:i,ref:t},k(e?s:c,i))};if(c&&(!V&&!A&&(C||w(n))||X(n)&&!n||A&&!W(s).isValid||V&&!F(s).isValid)){const{value:n,message:s}=se(c)?{value:!!c,message:c}:te(c);if(n&&(g[b]=Object.assign({type:p,message:s,ref:x?((e.current[b].options||[])[0]||{}).ref:t},k(p,s)),!r))return g}if((!w(u)||!w(o))&&\"\"!==n){let e,s;const c=te(o),i=te(u);if(isNaN(n)){const r=t.valueAsDate||new Date(n);Z(c.value)&&(e=r>new Date(c.value)),Z(i.value)&&(s=r<new Date(i.value))}else{const r=t.valueAsNumber||parseFloat(n);w(c.value)||(e=r>c.value),w(i.value)||(s=r<i.value)}if((e||s)&&(R(!!e,c.message,i.message,v,h),!r))return g}if(Z(n)&&!C&&(i||a)){const e=te(i),t=te(a),s=!w(e.value)&&n.length>e.value,c=!w(t.value)&&n.length<t.value;if((s||c)&&(R(s,e.message,t.message),!r))return g}if(Z(n)&&l&&!C){const{value:e,message:s}=te(l);if(re(e)&&!e.test(n)&&(g[b]=Object.assign({type:O,message:s,ref:t},k(O,s)),!r))return g}if(f){const n=q(e,b,d,!1,!0),c=x&&s?s[0].ref:t;if(ne(f)){const e=ce(await f(n),c);if(e&&(g[b]=Object.assign(Object.assign({},e),k(j,e.message)),!r))return g}else if(S(f)){let e={};for(const[t,s]of Object.entries(f)){if(!$(e)&&!r)break;const i=ce(await s(n),c,t);i&&(e=Object.assign(Object.assign({},i),k(t,i.message)),r&&(g[b]=e))}if(!$(e)&&(g[b]=Object.assign({ref:c},e),!r))return g}}return g};const ue=(e,r,t=[])=>{for(const n in r){const s=e+(S(r)?`.${n}`:`[${n}]`);U(r[n])?t.push(s):ue(s,r[n],t)}return t};var oe=(e,r,t,n,s)=>{let c;return t.add(r),$(e)||(c=M(e,r),(S(c)||Array.isArray(c))&&ue(r,c).forEach((e=>t.add(e)))),N(c)?s?n:M(n,r):c},le=({isOnBlur:e,isOnChange:r,isOnTouch:t,isTouched:n,isReValidateOnBlur:s,isReValidateOnChange:c,isBlurEvent:i,isSubmitted:a,isOnAll:u})=>!u&&(!a&&t?!(n||i):(a?s:e)?!i:!(a?c:r)||i),fe=e=>e.substring(0,e.indexOf(\"[\"));const de=(e,r)=>RegExp(`^${r}([|.)\\\\d+`.replace(/\\[/g,\"\\\\[\").replace(/\\]/g,\"\\\\]\")).test(e);var be=(e,r)=>[...e].some((e=>de(r,e)));var ge=typeof window!==g&&typeof document!==g;function ve(e){let r;if(U(e)||ge&&(e instanceof File||c(e)))return e;if(e instanceof Date)return r=new Date(e.getTime()),r;if(e instanceof Set){r=new Set;for(const t of e)r.add(t);return r}if(e instanceof Map){r=new Map;for(const t of e.keys())r.set(t,ve(e.get(t)));return r}r=Array.isArray(e)?[]:{};for(const t in e)r[t]=ve(e[t]);return r}var he=e=>({isOnSubmit:!e||e===f,isOnBlur:e===o,isOnChange:e===l,isOnAll:e===b,isOnTouch:e===d}),me=e=>B(e)||H(e);const ye=typeof window===g,Oe=ge?\"Proxy\"in window:typeof Proxy!==g;function pe({mode:e=f,reValidateMode:r=l,resolver:t,context:s,defaultValues:o={},shouldFocusError:d=!0,shouldUnregister:g=!0,criteriaMode:v}={}){const h=Object(n.useRef)({}),m=Object(n.useRef)({}),y=Object(n.useRef)({}),O=Object(n.useRef)(new Set),p=Object(n.useRef)({}),j=Object(n.useRef)({}),V=Object(n.useRef)({}),C=Object(n.useRef)({}),D=Object(n.useRef)(o),F=Object(n.useRef)(!1),_=Object(n.useRef)(!1),z=Object(n.useRef)(),W=Object(n.useRef)({}),X=Object(n.useRef)({}),G=Object(n.useRef)(s),Q=Object(n.useRef)(t),re=Object(n.useRef)(new Set),te=Object(n.useRef)(he(e)),{isOnSubmit:se,isOnTouch:ce}=te.current,ie=v===b,[de,pe]=Object(n.useState)({isDirty:!1,isValidating:!1,dirtyFields:{},isSubmitted:!1,submitCount:0,touched:{},isSubmitting:!1,isSubmitSuccessful:!1,isValid:!se,errors:{}}),je=Object(n.useRef)({isDirty:!Oe,dirtyFields:!Oe,touched:!Oe||ce,isValidating:!Oe,isSubmitting:!Oe,isValid:!Oe}),we=Object(n.useRef)(de),Ve=Object(n.useRef)(),{isOnBlur:Se,isOnChange:Ae}=Object(n.useRef)(he(r)).current;G.current=s,Q.current=t,we.current=de,W.current=g?{}:$(W.current)?ve(o):W.current;const xe=Object(n.useCallback)(((e={})=>{F.current||(we.current=Object.assign(Object.assign({},we.current),e),pe(we.current))}),[]),Ce=()=>je.current.isValidating&&xe({isValidating:!0}),ke=Object(n.useCallback)(((e,r,t=!1,n={},s)=>{let c=t||(({errors:e,name:r,error:t,validFields:n,fieldsWithValidation:s})=>{const c=N(t),i=M(e,r);return c&&!!i||!c&&!K(i,t,!0)||c&&M(s,r)&&!M(n,r)})({errors:we.current.errors,error:r,name:e,validFields:C.current,fieldsWithValidation:V.current});const i=M(we.current.errors,e);r?(I(C.current,e),c=c||!i||!K(i,r,!0),k(we.current.errors,e,r)):((M(V.current,e)||Q.current)&&(k(C.current,e,!0),c=c||i),I(we.current.errors,e)),(c&&!w(t)||!$(n)||je.current.isValidating)&&xe(Object.assign(Object.assign(Object.assign({},n),Q.current?{isValid:!!s}:{}),{isValidating:!1}))}),[]),Re=Object(n.useCallback)(((e,r)=>{const{ref:t,options:n}=h.current[e],s=ge&&c(t)&&w(r)?\"\":r;B(t)?(n||[]).forEach((({ref:e})=>e.checked=e.value===s)):L(t)&&!Z(s)?t.files=s:T(t)?[...t.options].forEach((e=>e.selected=s.includes(e.value))):H(t)&&n?n.length>1?n.forEach((({ref:e})=>e.checked=Array.isArray(s)?!!s.find((r=>r===e.value)):s===e.value)):n[0].ref.checked=!!s:t.value=s}),[]),Ne=Object(n.useCallback)(((e,r)=>{if(je.current.isDirty){const t=ze();return e&&r&&k(t,e,r),!K(t,D.current)}return!1}),[]),Me=Object(n.useCallback)(((e,r=!0)=>{if(je.current.isDirty||je.current.dirtyFields){const t=!K(M(D.current,e),q(h,e,W)),n=M(we.current.dirtyFields,e),s=we.current.isDirty;t?k(we.current.dirtyFields,e,!0):I(we.current.dirtyFields,e);const c={isDirty:Ne(),dirtyFields:we.current.dirtyFields},i=je.current.isDirty&&s!==c.isDirty||je.current.dirtyFields&&n!==M(we.current.dirtyFields,e);return i&&r&&xe(c),i?c:{}}return{}}),[]),Ee=Object(n.useCallback)((async(e,r)=>{const t=(await ae(h,ie,h.current[e],W))[e];return ke(e,t,r),N(t)}),[ke,ie]),De=Object(n.useCallback)((async e=>{const{errors:r}=await Q.current(ze(),G.current,ie),t=we.current.isValid;if(Array.isArray(e)){const t=e.map((e=>{const t=M(r,e);return t?k(we.current.errors,e,t):I(we.current.errors,e),!t})).every(Boolean);return xe({isValid:$(r),isValidating:!1}),t}{const n=M(r,e);return ke(e,n,t!==$(r),{},$(r)),!n}}),[ke,ie]),Fe=Object(n.useCallback)((async e=>{const r=e||Object.keys(h.current);if(Ce(),Q.current)return De(r);if(Array.isArray(r)){!e&&(we.current.errors={});const t=await Promise.all(r.map((async e=>await Ee(e,null))));return xe({isValidating:!1}),t.every(Boolean)}return await Ee(r)}),[De,Ee]),Be=Object(n.useCallback)(((e,r,{shouldDirty:t,shouldValidate:n})=>{const s={};k(s,e,r);for(const c of ue(e,r))h.current[c]&&(Re(c,M(s,c)),t&&Me(c),n&&Fe(c))}),[Fe,Re,Me]),Le=Object(n.useCallback)(((e,r,t)=>{if(!g&&!U(r)&&k(W.current,e,Object.assign({},r)),h.current[e])Re(e,r),t.shouldDirty&&Me(e),t.shouldValidate&&Fe(e);else if(!U(r)&&(Be(e,r,t),re.current.has(e))){const n=fe(e)||e;k(m.current,e,r),X.current[n]({[n]:M(m.current,n)}),(je.current.isDirty||je.current.dirtyFields)&&t.shouldDirty&&(k(we.current.dirtyFields,e,Y(r,M(D.current,e,[]),M(we.current.dirtyFields,e,[]))),xe({isDirty:!K(Object.assign(Object.assign({},ze()),{[e]:r}),D.current)}))}!g&&k(W.current,e,r)}),[Me,Re,Be]),He=e=>_.current||O.current.has(e)||O.current.has((e.match(/\\w+/)||[])[0]),Te=e=>{let r=!0;if(!$(p.current))for(const t in p.current)e&&p.current[t].size&&!p.current[t].has(e)&&!p.current[t].has(fe(e))||(j.current[t](),r=!1);return r};function _e(e){if(!g){let r=ve(e);for(const e of re.current)A(e)&&!r[e]&&(r=Object.assign(Object.assign({},r),{[e]:[]}));return r}return e}function ze(e){if(Z(e))return q(h,e,W);if(Array.isArray(e)){const r={};for(const t of e)k(r,t,q(h,t,W));return r}return _e(ee(h,ve(W.current),g))}z.current=z.current?z.current:async({type:e,target:r})=>{let t=r.name;const n=h.current[t];let s,c;if(n){const a=e===i,u=le(Object.assign({isBlurEvent:a,isReValidateOnChange:Ae,isReValidateOnBlur:Se,isTouched:!!M(we.current.touched,t),isSubmitted:we.current.isSubmitted},te.current));let o=Me(t,!1),l=!$(o)||!a&&He(t);if(a&&!M(we.current.touched,t)&&je.current.touched&&(k(we.current.touched,t,!0),o=Object.assign(Object.assign({},o),{touched:we.current.touched})),!g&&H(r)&&k(W.current,t,q(h,t)),u)return!a&&Te(t),(!$(o)||l&&$(o))&&xe(o);if(Ce(),Q.current){const{errors:e}=await Q.current(ze(),G.current,ie),n=we.current.isValid;if(s=M(e,t),H(r)&&!s&&Q.current){const r=fe(t),n=M(e,r,{});n.type&&n.message&&(s=n),r&&(n||M(we.current.errors,r))&&(t=r)}c=$(e),n!==c&&(l=!0)}else s=(await ae(h,ie,n,W))[t];!a&&Te(t),ke(t,s,l,o,c)}};const We=Object(n.useCallback)((async(e={})=>{const r=$(h.current)?D.current:{},{errors:t}=await Q.current(Object.assign(Object.assign(Object.assign({},r),ze()),e),G.current,ie)||{},n=$(t);we.current.isValid!==n&&xe({isValid:n})}),[ie]),qe=Object(n.useCallback)(((e,r)=>{!function(e,r,t,n,s,c){const{ref:i,ref:{name:a}}=t,u=e.current[a];if(!s){const r=q(e,a,n);!N(r)&&k(n.current,a,r)}i.type&&u?B(i)||H(i)?Array.isArray(u.options)&&u.options.length?(x(u.options).forEach(((e={},t)=>{(P(e.ref)&&J(e,e.ref)||c)&&(E(e.ref,r),I(u.options,`[${t}]`))})),u.options&&!x(u.options).length&&delete e.current[a]):delete e.current[a]:(P(i)&&J(u,i)||c)&&(E(i,r),delete e.current[a]):delete e.current[a]}(h,z.current,e,W,g,r),g&&(I(C.current,e.ref.name),I(V.current,e.ref.name))}),[g]),Pe=Object(n.useCallback)((e=>{if(_.current)xe();else{for(const r of O.current)if(r.startsWith(e)){xe();break}Te(e)}}),[]),$e=Object(n.useCallback)(((e,r)=>{e&&(qe(e,r),g&&!x(e.options||[]).length&&(I(we.current.errors,e.ref.name),k(we.current.dirtyFields,e.ref.name,!0),xe({isDirty:Ne()}),je.current.isValid&&Q.current&&We(),Pe(e.ref.name)))}),[We,qe]);const Xe=Object(n.useCallback)(((e,r,t)=>{const n=t?p.current[t]:O.current;let s=ee(h,ve(W.current),g,!1,e);if(Z(e)){const t=fe(e)||e;return re.current.has(t)&&(s=Object.assign(Object.assign({},y.current),s)),oe(s,e,n,N(M(D.current,e))?r:M(D.current,e),!0)}const c=N(r)?D.current:r;return Array.isArray(e)?e.reduce(((e,r)=>Object.assign(Object.assign({},e),{[r]:oe(s,r,n,c)})),{}):(_.current=N(t),R(!$(s)&&s||c))}),[]);function Ie(e,r={}){const{name:t,type:n,value:s}=e,o=Object.assign({ref:e},r),l=h.current,f=me(e),d=be(re.current,t),b=r=>ge&&(!c(e)||r===e);let v,m=l[t],y=!0;if(m&&(f?Array.isArray(m.options)&&x(m.options).find((e=>s===e.ref.value&&b(e.ref))):b(m.ref)))return void(l[t]=Object.assign(Object.assign({},m),r));m=n?f?Object.assign({options:[...x(m&&m.options||[]),{ref:e}],ref:{type:n,name:t}},r):Object.assign({},o):o,l[t]=m;const O=N(M(W.current,t));$(D.current)&&O||(v=M(O?D.current:W.current,t),y=N(v),y||d||Re(t,v)),$(r)||(k(V.current,t,!0),!se&&je.current.isValid&&ae(h,ie,m,W).then((e=>{const r=we.current.isValid;$(e)?k(C.current,t,!0):I(C.current,t),r!==$(e)&&xe()}))),!g||d&&y||!d&&I(we.current.dirtyFields,t),n&&function({ref:e},r,t){c(e)&&t&&(e.addEventListener(r?a:u,t),e.addEventListener(i,t))}(f&&m.options?m.options[m.options.length-1]:m,f||\"select-one\"===e.type,z.current)}const Je=Object(n.useCallback)(((e,r)=>async t=>{t&&t.preventDefault&&(t.preventDefault(),t.persist());let n={},s=_e(ee(h,ve(W.current),g,!0));je.current.isSubmitting&&xe({isSubmitting:!0});try{if(Q.current){const{errors:e,values:r}=await Q.current(s,G.current,ie);we.current.errors=n=e,s=r}else for(const e of Object.values(h.current))if(e){const{name:r}=e.ref,t=await ae(h,ie,e,W);t[r]?(k(n,r,t[r]),I(C.current,r)):M(V.current,r)&&(I(we.current.errors,r),k(C.current,r,!0))}$(n)&&Object.keys(we.current.errors).every((e=>e in h.current))?(xe({errors:{},isSubmitting:!0}),await e(s,t)):(we.current.errors=Object.assign(Object.assign({},we.current.errors),n),r&&await r(we.current.errors,t),d&&((e,r)=>{for(const t in e)if(M(r,t)){const r=e[t];if(r){if(r.ref.focus&&N(r.ref.focus()))break;if(r.options){r.options[0].ref.focus();break}}}})(h.current,we.current.errors))}finally{we.current.isSubmitting=!1,xe({isSubmitted:!0,isSubmitting:!1,isSubmitSuccessful:$(we.current.errors),submitCount:we.current.submitCount+1})}}),[d,ie]);Object(n.useEffect)((()=>{t&&je.current.isValid&&We(),Ve.current=Ve.current||!ge?Ve.current:function(e,r){const t=new MutationObserver((()=>{for(const t of Object.values(e.current))if(t&&t.options)for(const e of t.options)e&&e.ref&&P(e.ref)&&r(t);else t&&P(t.ref)&&r(t)}));return t.observe(window.document,{childList:!0,subtree:!0}),t}(h,$e)}),[$e,D.current]),Object(n.useEffect)((()=>()=>{Ve.current&&Ve.current.disconnect(),F.current=!0,Object.values(h.current).forEach((e=>$e(e,!0)))}),[]),!t&&je.current.isValid&&(de.isValid=K(C.current,V.current)&&$(we.current.errors));const Ue={trigger:Fe,setValue:Object(n.useCallback)((function(e,r,t){Le(e,r,t||{}),He(e)&&xe(),Te(e)}),[Le,Fe]),getValues:Object(n.useCallback)(ze,[]),register:Object(n.useCallback)((function(e,r){if(!ye)if(Z(e))Ie({name:e},r);else{if(!S(e)||!(\"name\"in e))return r=>r&&Ie(r,e);Ie(e,r)}}),[D.current]),unregister:Object(n.useCallback)((function(e){for(const r of Array.isArray(e)?e:[e])$e(h.current[r],!0)}),[]),formState:Oe?new Proxy(de,{get:(e,r)=>{if(r in e)return je.current[r]=!0,e[r]}}):de},Ge=Object(n.useMemo)((()=>Object.assign({isFormDirty:Ne,updateWatchedValue:Pe,shouldUnregister:g,updateFormState:xe,removeFieldEventListener:qe,watchInternal:Xe,mode:te.current,reValidateMode:{isReValidateOnBlur:Se,isReValidateOnChange:Ae},validateResolver:t?We:void 0,fieldsRef:h,resetFieldArrayFunctionRef:X,useWatchFieldsRef:p,useWatchRenderFunctionsRef:j,fieldArrayDefaultValuesRef:m,validFieldsRef:C,fieldsWithValidationRef:V,fieldArrayNamesRef:re,readFormStateRef:je,formStateRef:we,defaultValuesRef:D,shallowFieldsStateRef:W,fieldArrayValuesRef:y},Ue)),[D.current,Pe,g,qe,Xe]);return Object.assign({watch:function(e,r){return Xe(e,r)},control:Ge,handleSubmit:Je,reset:Object(n.useCallback)(((e,r={})=>{if(ge)for(const n of Object.values(h.current))if(n){const{ref:e,options:r}=n,s=me(e)&&Array.isArray(r)?r[0].ref:e;if(c(s))try{s.closest(\"form\").reset();break}catch(t){}}h.current={},D.current=Object.assign({},e||D.current),e&&Te(\"\"),Object.values(X.current).forEach((e=>ne(e)&&e())),W.current=g?{}:ve(e||D.current),(({errors:e,isDirty:r,isSubmitted:t,touched:n,isValid:s,submitCount:c,dirtyFields:i})=>{s||(C.current={},V.current={}),m.current={},O.current=new Set,_.current=!1,xe({submitCount:c?we.current.submitCount:0,isDirty:!!r&&we.current.isDirty,isSubmitted:!!t&&we.current.isSubmitted,isValid:!!s&&we.current.isValid,dirtyFields:i?we.current.dirtyFields:{},touched:n?we.current.touched:{},errors:e?we.current.errors:{},isSubmitting:!1,isSubmitSuccessful:!1})})(r)}),[]),clearErrors:Object(n.useCallback)((function(e){e&&(Array.isArray(e)?e:[e]).forEach((e=>h.current[e]&&A(e)?delete we.current.errors[e]:I(we.current.errors,e))),xe({errors:e?we.current.errors:{}})}),[]),setError:Object(n.useCallback)((function(e,r){const t=(h.current[e]||{}).ref;k(we.current.errors,e,Object.assign(Object.assign({},r),{ref:t})),xe({isValid:!1}),r.shouldFocus&&t&&t.focus&&t.focus()}),[]),errors:de.errors},Ue)}const je=Object(n.createContext)(null);je.displayName=\"RHFContext\";var we=t(\"X5r+\"),Ve=s.a.createElement;r.default=function(){var e=pe(),r=e.register,t=e.handleSubmit;return Ve(we.a,null,Ve(\"div\",{className:\"flex flex-col h-full w-full justify-content space-x-4 m-10 p-10  \"},Ve(\"form\",{onSubmit:t((function(e){alert(JSON.stringify(e))}))},Ve(\"div\",null,Ve(\"label\",{className:\"text-l mt-4 font-bold text-logodark block text-right\"},\"\\u0627\\u0644\\u0628\\u0631\\u064a\\u062f \\u0627\\u0644\\u0625\\u0644\\u0643\\u062a\\u0631\\u0648\\u0646\\u064a\"),Ve(\"input\",{ref:r,type:\"text\",className:\"w-full p-2 mt-4 border border-gray-300 rounded mt-1\",name:\"email\"})),Ve(\"div\",null,Ve(\"label\",{className:\"text-l mt-4 font-bold text-logodark block text-right\"},\"\\u0643\\u0644\\u0645\\u0629 \\u0627\\u0644\\u0645\\u0631\\u0648\\u0631\"),Ve(\"input\",{ref:r,type:\"password\",className:\"w-full p-2 mt-4 border border-gray-300 rounded mt-1\",name:\"password\"})),Ve(\"div\",null,Ve(\"label\",{className:\"text-l mt-4 font-bold text-logodark block text-right\"},\"\\u0625\\u0639\\u0627\\u062f\\u0629 \\u0643\\u0644\\u0645\\u0629 \\u0627\\u0644\\u0645\\u0631\\u0648\\u0631\"),Ve(\"input\",{ref:r,type:\"password\",className:\"w-full p-2 mt-4 border border-gray-300 rounded mt-1\",name:\"repassword\"})),Ve(\"div\",null,Ve(\"button\",{type:\"Submit\",className:\"text-l font-bold text-white mt-4 text-center button w-full py-2 px-4 bg-logodark hover:bg-black rounded-xl\"},\"\\u062a\\u0633\\u062c\\u064a\\u0644\")))))}},\"X5r+\":function(e,r,t){\"use strict\";var n=t(\"q1tI\"),s=t.n(n).a.createElement,c=function(e){return s(\"li\",{className:\"flex text-xl p-6 space-x-3  items-center justify-end hover:bg-gray-200\"},s(\"span\",null,e.children),i[e.icon])},i={home:s(\"svg\",{className:\"svg-icon\",viewBox:\"0 0 30 20\"},s(\"path\",{d:\"M18.121,9.88l-7.832-7.836c-0.155-0.158-0.428-0.155-0.584,0L1.842,9.913c-0.262,0.263-0.073,0.705,0.292,0.705h2.069v7.042c0,0.227,0.187,0.414,0.414,0.414h3.725c0.228,0,0.414-0.188,0.414-0.414v-3.313h2.483v3.313c0,0.227,0.187,0.414,0.413,0.414h3.726c0.229,0,0.414-0.188,0.414-0.414v-7.042h2.068h0.004C18.331,10.617,18.389,10.146,18.121,9.88 M14.963,17.245h-2.896v-3.313c0-0.229-0.186-0.415-0.414-0.415H8.342c-0.228,0-0.414,0.187-0.414,0.415v3.313H5.032v-6.628h9.931V17.245z M3.133,9.79l6.864-6.868l6.867,6.868H3.133z\"})),process:s(\"svg\",{className:\"svg-icon\",viewBox:\"0 0 30 20\"},s(\"path\",{d:\"M14.68,12.621c-0.9,0-1.702,0.43-2.216,1.09l-4.549-2.637c0.284-0.691,0.284-1.457,0-2.146l4.549-2.638c0.514,0.661,1.315,1.09,2.216,1.09c1.549,0,2.809-1.26,2.809-2.808c0-1.548-1.26-2.809-2.809-2.809c-1.548,0-2.808,1.26-2.808,2.809c0,0.38,0.076,0.741,0.214,1.073l-4.55,2.638c-0.515-0.661-1.316-1.09-2.217-1.09c-1.548,0-2.808,1.26-2.808,2.809s1.26,2.808,2.808,2.808c0.9,0,1.702-0.43,2.217-1.09l4.55,2.637c-0.138,0.332-0.214,0.693-0.214,1.074c0,1.549,1.26,2.809,2.808,2.809c1.549,0,2.809-1.26,2.809-2.809S16.229,12.621,14.68,12.621M14.68,2.512c1.136,0,2.06,0.923,2.06,2.06S15.815,6.63,14.68,6.63s-2.059-0.923-2.059-2.059S13.544,2.512,14.68,2.512M5.319,12.061c-1.136,0-2.06-0.924-2.06-2.06s0.923-2.059,2.06-2.059c1.135,0,2.06,0.923,2.06,2.059S6.454,12.061,5.319,12.061M14.68,17.488c-1.136,0-2.059-0.922-2.059-2.059s0.923-2.061,2.059-2.061s2.06,0.924,2.06,2.061S15.815,17.488,14.68,17.488\"})),salesemp:s(\"svg\",{className:\"svg-icon\",viewBox:\"0 0 30 20\"},s(\"path\",{d:\"M15.573,11.624c0.568-0.478,0.947-1.219,0.947-2.019c0-1.37-1.108-2.569-2.371-2.569s-2.371,1.2-2.371,2.569c0,0.8,0.379,1.542,0.946,2.019c-0.253,0.089-0.496,0.2-0.728,0.332c-0.743-0.898-1.745-1.573-2.891-1.911c0.877-0.61,1.486-1.666,1.486-2.812c0-1.79-1.479-3.359-3.162-3.359S4.269,5.443,4.269,7.233c0,1.146,0.608,2.202,1.486,2.812c-2.454,0.725-4.252,2.998-4.252,5.685c0,0.218,0.178,0.396,0.395,0.396h16.203c0.218,0,0.396-0.178,0.396-0.396C18.497,13.831,17.273,12.216,15.573,11.624 M12.568,9.605c0-0.822,0.689-1.779,1.581-1.779s1.58,0.957,1.58,1.779s-0.688,1.779-1.58,1.779S12.568,10.427,12.568,9.605 M5.06,7.233c0-1.213,1.014-2.569,2.371-2.569c1.358,0,2.371,1.355,2.371,2.569S8.789,9.802,7.431,9.802C6.073,9.802,5.06,8.447,5.06,7.233 M2.309,15.335c0.202-2.649,2.423-4.742,5.122-4.742s4.921,2.093,5.122,4.742H2.309z M13.346,15.335c-0.067-0.997-0.382-1.928-0.882-2.732c0.502-0.271,1.075-0.429,1.686-0.429c1.828,0,3.338,1.385,3.535,3.161H13.346z\"})),reports:s(\"svg\",{className:\"svg-icon\",viewBox:\"0 0 30 20\"},s(\"path\",{d:\"M15.396,2.292H4.604c-0.212,0-0.385,0.174-0.385,0.386v14.646c0,0.212,0.173,0.385,0.385,0.385h10.792c0.211,0,0.385-0.173,0.385-0.385V2.677C15.781,2.465,15.607,2.292,15.396,2.292 M15.01,16.938H4.99v-2.698h1.609c0.156,0.449,0.586,0.771,1.089,0.771c0.638,0,1.156-0.519,1.156-1.156s-0.519-1.156-1.156-1.156c-0.503,0-0.933,0.321-1.089,0.771H4.99v-3.083h1.609c0.156,0.449,0.586,0.771,1.089,0.771c0.638,0,1.156-0.518,1.156-1.156c0-0.638-0.519-1.156-1.156-1.156c-0.503,0-0.933,0.322-1.089,0.771H4.99V6.531h1.609C6.755,6.98,7.185,7.302,7.688,7.302c0.638,0,1.156-0.519,1.156-1.156c0-0.638-0.519-1.156-1.156-1.156c-0.503,0-0.933,0.322-1.089,0.771H4.99V3.062h10.02V16.938z M7.302,13.854c0-0.212,0.173-0.386,0.385-0.386s0.385,0.174,0.385,0.386s-0.173,0.385-0.385,0.385S7.302,14.066,7.302,13.854 M7.302,10c0-0.212,0.173-0.385,0.385-0.385S8.073,9.788,8.073,10s-0.173,0.385-0.385,0.385S7.302,10.212,7.302,10 M7.302,6.146c0-0.212,0.173-0.386,0.385-0.386s0.385,0.174,0.385,0.386S7.899,6.531,7.688,6.531S7.302,6.358,7.302,6.146\"})),clients:s(\"svg\",{className:\"svg-icon\",viewBox:\"0 0 30 20\"},s(\"path\",{d:\"M12.075,10.812c1.358-0.853,2.242-2.507,2.242-4.037c0-2.181-1.795-4.618-4.198-4.618S5.921,4.594,5.921,6.775c0,1.53,0.884,3.185,2.242,4.037c-3.222,0.865-5.6,3.807-5.6,7.298c0,0.23,0.189,0.42,0.42,0.42h14.273c0.23,0,0.42-0.189,0.42-0.42C17.676,14.619,15.297,11.677,12.075,10.812 M6.761,6.775c0-2.162,1.773-3.778,3.358-3.778s3.359,1.616,3.359,3.778c0,2.162-1.774,3.778-3.359,3.778S6.761,8.937,6.761,6.775 M3.415,17.69c0.218-3.51,3.142-6.297,6.704-6.297c3.562,0,6.486,2.787,6.705,6.297H3.415z\"})),requests:s(\"svg\",{className:\"svg-icon\",viewBox:\"0 0 30 20\"},s(\"path\",{d:\"M17.218,2.268L2.477,8.388C2.13,8.535,2.164,9.05,2.542,9.134L9.33,10.67l1.535,6.787c0.083,0.377,0.602,0.415,0.745,0.065l6.123-14.74C17.866,2.46,17.539,2.134,17.218,2.268 M3.92,8.641l11.772-4.89L9.535,9.909L3.92,8.641z M11.358,16.078l-1.268-5.613l6.157-6.157L11.358,16.078z\"})),fieldoff:s(\"svg\",{className:\"svg-icon\",viewBox:\"0 0 30 20\"},s(\"path\",{d:\"M10,1.375c-3.17,0-5.75,2.548-5.75,5.682c0,6.685,5.259,11.276,5.483,11.469c0.152,0.132,0.382,0.132,0.534,0c0.224-0.193,5.481-4.784,5.483-11.469C15.75,3.923,13.171,1.375,10,1.375 M10,17.653c-1.064-1.024-4.929-5.127-4.929-10.596c0-2.68,2.212-4.861,4.929-4.861s4.929,2.181,4.929,4.861C14.927,12.518,11.063,16.627,10,17.653 M10,3.839c-1.815,0-3.286,1.47-3.286,3.286s1.47,3.286,3.286,3.286s3.286-1.47,3.286-3.286S11.815,3.839,10,3.839 M10,9.589c-1.359,0-2.464-1.105-2.464-2.464S8.641,4.661,10,4.661s2.464,1.105,2.464,2.464S11.359,9.589,10,9.589\"})),login:s(\"svg\",{className:\"svg-icon\",viewBox:\"0 0 20 20\"},s(\"path\",{d:\"M17.308,7.564h-1.993c0-2.929-2.385-5.314-5.314-5.314S4.686,4.635,4.686,7.564H2.693c-0.244,0-0.443,0.2-0.443,0.443v9.3c0,0.243,0.199,0.442,0.443,0.442h14.615c0.243,0,0.442-0.199,0.442-0.442v-9.3C17.75,7.764,17.551,7.564,17.308,7.564 M10,3.136c2.442,0,4.43,1.986,4.43,4.428H5.571C5.571,5.122,7.558,3.136,10,3.136 M16.865,16.864H3.136V8.45h13.729V16.864z M10,10.664c-0.854,0-1.55,0.696-1.55,1.551c0,0.699,0.467,1.292,1.107,1.485v0.95c0,0.243,0.2,0.442,0.443,0.442s0.443-0.199,0.443-0.442V13.7c0.64-0.193,1.106-0.786,1.106-1.485C11.55,11.36,10.854,10.664,10,10.664 M10,12.878c-0.366,0-0.664-0.298-0.664-0.663c0-0.366,0.298-0.665,0.664-0.665c0.365,0,0.664,0.299,0.664,0.665C10.664,12.58,10.365,12.878,10,12.878\"}))};r.a=function(e){var r=e.children;return s(\"div\",{className:\"font-body flex flex-row-reverse h-screen   p-4 bg-logodark\"},s(\"title\",null,\"\\u0644\\u0648\\u062d\\u0629 \\u0627\\u0644\\u062a\\u062d\\u0643\\u0645\"),s(\"ul\",{className:\"bg-lightest absolute w-44 font-bold p-2 mb-2 rounded-xl\"},s(\"a\",{href:\"/login\"},s(c,{icon:\"login\"},\"\\u062f\\u062e\\u0648\\u0644\"))),s(\"div\",{className:\"flex items-center\"},s(\"aside\",{className:\"bg-lightest flex-row items-center font-bold hover:rounded-xl rounded-xl \"},s(\"nav\",null,s(\"ul\",null,s(\"div\",{className:\"grid grid-cols-1 col-center-1 divide-y divide-Gray\"},s(\"a\",{href:\"/register\"},\"     \",s(c,{icon:\"home\"},\" \\u0627\\u0644\\u0631\\u0626\\u064a\\u0633\\u064a\\u0629\"),\"           \"),s(\"a\",{href:\"/Process\"},\"      \",s(c,{icon:\"process\"},\"\\u0627\\u0644\\u0639\\u0645\\u0644\\u064a\\u0627\\u062a\"),\"        \"),s(\"a\",{href:\"/SalesEmployee\"},s(c,{icon:\"salesemp\"},\"\\u0645\\u0648\\u0638\\u0641\\u064a\\u0646 \\u0627\\u0644\\u0645\\u0628\\u064a\\u0639\\u0627\\u062a\")),s(\"a\",{href:\"/Reports\"},\"      \",s(c,{icon:\"reports\"},\"\\u0627\\u0644\\u062a\\u0642\\u0627\\u0631\\u064a\\u0631\"),\"        \"),s(\"a\",{href:\"/Clients\"},\"      \",s(c,{icon:\"clients\"},\"\\u0627\\u0644\\u0639\\u0645\\u0644\\u0627\\u0621\"),\"          \"),s(\"a\",{href:\"/Requests\"},\"     \",s(c,{icon:\"requests\"},\"\\u0627\\u0644\\u0637\\u0644\\u0628\\u0627\\u062a\"),\"        \"),s(\"a\",{href:\"/FieldOffers\"},\"  \",s(c,{icon:\"fieldoff\"},\"\\u0639\\u0631\\u0648\\u0636 \\u0627\\u0644\\u0645\\u064a\\u062f\\u0627\\u0646\"),\"   \")))))),s(\"div\",{className:\"flex flex-grow h-10/12 bg-lightest  mr-6 p-6 rounded-2xl \"},r))}},\"c05+\":function(e,r,t){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/register\",function(){return t(\"Dsvi\")}])}},[[\"c05+\",0,1,2]]]);","map":{"version":3,"sources":["static/chunks/pages/register-b9110891ccbbe5c985ed.js"],"names":["_N_E","window","push","Dsvi","module","__webpack_exports__","__webpack_require__","r","react","react_default","n","isHTMLElement","value","HTMLElement","EVENTS","VALIDATION_MODE","UNDEFINED","INPUT_VALIDATION_RULES","isNullOrUndefined","isObjectType","isObject","Array","isArray","Date","isKey","test","compact","filter","Boolean","stringToPath","input","replace","split","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","isUndefined","val","undefined","get","obj","defaultValue","result","reduce","removeAllEventListeners","ref","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","getRadioValue","options","previous","option","checked","isRadioInput","element","type","isFileInput","isCheckBoxInput","isMultipleSelect","defaultResult","validResult","getCheckboxValue","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","field","current","disabled","valueAsNumber","valueAsDate","setValueAs","files","selected","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","isEmptyObject","Object","keys","isBoolean","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isSameRef","fieldValue","isPrimitive","deepMerge","target","source","targetValue","sourceValue","_a","deepEqual","object1","object2","isErrorObject","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","assign","[object Object]","setFieldArrayDirtyFields","isString","getFieldsValues","shallowFieldsState","shouldUnregister","search","output","startsWith","find","isRegex","RegExp","getValueAndMessage","validationData","message","isFunction","isMessage","getValidateError","appendErrors","validateAllFieldCriteria","errors","types","validateField","async","required","maxLength","minLength","min","max","pattern","validate","error","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","validateRef","validateError","validationResult","validateFunction","entries","getPath","rootPath","paths","property","rootName","assignWatchFields","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","skipValidation","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","getFieldArrayParentName","substring","indexOf","isMatchFieldArrayName","searchName","isNameInFieldArray","names","some","isWeb","document","cloneObject","copy","File","getTime","Set","Map","modeChecker","mode","isOnSubmit","isRadioOrCheckboxFunction","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","isValidateAllFieldCriteria","formState","setFormState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","readFormStateRef","formStateRef","observerRef","updateFormState","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","previousError","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","fields","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","setFieldArrayDefaultValues","payload","shouldSkipValidation","parentNodeName","currentError","validateResolver","newDefaultValues","removeFieldEventListener","forceDelete","handleChange","fieldRef","findRemovedFieldAndRemoveListener","updateWatchedValue","watchField","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","registerFieldRef","fieldRefAndValidationOptions","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","fieldError","focus","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","setValue","register","refOrRegisterOptions","unregister","prop","control","watch","reset","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","shouldFocus","FormContext","displayName","layout","__jsx","a","createElement","_useForm","className","onSubmit","alert","JSON","stringify","X5r+","react__WEBPACK_IMPORTED_MODULE_0__","Row","props","children","icons","icon","home","viewBox","d","process","salesemp","reports","clients","requests","fieldoff","login","_ref","href","c05+","exports","__NEXT_P"],"mappings":"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"},"name":"static/chunks/pages/register-b9110891ccbbe5c985ed.js","input":"_N_E =\n(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[19],{\n\n/***/ \"Dsvi\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(\"q1tI\");\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/next/image.js\nvar next_image = __webpack_require__(\"Aiso\");\n\n// CONCATENATED MODULE: ./node_modules/react-hook-form/dist/index.esm.js\n\n\nvar isHTMLElement = (value) => value instanceof HTMLElement;\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst SELECT = 'select';\r\nconst UNDEFINED = 'undefined';\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nfunction attachEventListeners({ ref }, shouldAttachChangeEvent, handleChange) {\r\n    if (isHTMLElement(ref) && handleChange) {\r\n        ref.addEventListener(shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !(value instanceof Date);\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar compact = (value) => value.filter(Boolean);\n\nvar stringToPath = (input) => compact(input\r\n    .replace(/[\"|']/g, '')\r\n    .replace(/\\[/g, '.')\r\n    .replace(/\\]/g, '')\r\n    .split('.'));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data, value = {}) => {\r\n    for (const key in data) {\r\n        !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\r\n    }\r\n    return value;\r\n};\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj = {}, path, defaultValue) => {\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nvar focusOnErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus && isUndefined(field.ref.focus())) {\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.ref.checked\r\n        ? {\r\n            isValid: true,\r\n            value: option.ref.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isMultipleSelect = (element) => element.type === `${SELECT}-multiple`;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.ref.checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || value === ''\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fieldsRef, name, shallowFieldsStateRef, excludeDisabled, shouldKeepRawValue) {\r\n    const field = fieldsRef.current[name];\r\n    if (field) {\r\n        const { ref: { value, disabled }, ref, valueAsNumber, valueAsDate, setValueAs, } = field;\r\n        if (disabled && excludeDisabled) {\r\n            return;\r\n        }\r\n        if (isFileInput(ref)) {\r\n            return ref.files;\r\n        }\r\n        if (isRadioInput(ref)) {\r\n            return getRadioValue(field.options).value;\r\n        }\r\n        if (isMultipleSelect(ref)) {\r\n            return getMultipleSelectValue(ref.options);\r\n        }\r\n        if (isCheckBoxInput(ref)) {\r\n            return getCheckboxValue(field.options).value;\r\n        }\r\n        return shouldKeepRawValue\r\n            ? value\r\n            : valueAsNumber\r\n                ? value === ''\r\n                    ? NaN\r\n                    : +value\r\n                : valueAsDate\r\n                    ? ref.valueAsDate\r\n                    : setValueAs\r\n                        ? setValueAs(value)\r\n                        : value;\r\n    }\r\n    if (shallowFieldsStateRef) {\r\n        return get(shallowFieldsStateRef.current, name);\r\n    }\r\n}\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) &&\r\n                        !objectRef.filter((data) => (isObject(data) && !isEmptyObject(data)) || isBoolean(data)).length))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nconst isSameRef = (fieldValue, ref) => fieldValue && fieldValue.ref === ref;\r\nfunction findRemovedFieldAndRemoveListener(fieldsRef, handleChange, field, shallowFieldsStateRef, shouldUnregister, forceDelete) {\r\n    const { ref, ref: { name }, } = field;\r\n    const fieldRef = fieldsRef.current[name];\r\n    if (!shouldUnregister) {\r\n        const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\r\n        !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\r\n    }\r\n    if (!ref.type || !fieldRef) {\r\n        delete fieldsRef.current[name];\r\n        return;\r\n    }\r\n    if (isRadioInput(ref) || isCheckBoxInput(ref)) {\r\n        if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\r\n            compact(fieldRef.options).forEach((option = {}, index) => {\r\n                if ((isDetached(option.ref) && isSameRef(option, option.ref)) ||\r\n                    forceDelete) {\r\n                    removeAllEventListeners(option.ref, handleChange);\r\n                    unset(fieldRef.options, `[${index}]`);\r\n                }\r\n            });\r\n            if (fieldRef.options && !compact(fieldRef.options).length) {\r\n                delete fieldsRef.current[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fieldsRef.current[name];\r\n        }\r\n    }\r\n    else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        delete fieldsRef.current[name];\r\n    }\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepMerge(target, source) {\r\n    if (isPrimitive(target) || isPrimitive(source)) {\r\n        return source;\r\n    }\r\n    for (const key in source) {\r\n        const targetValue = target[key];\r\n        const sourceValue = source[key];\r\n        try {\r\n            target[key] =\r\n                (isObject(targetValue) && isObject(sourceValue)) ||\r\n                    (Array.isArray(targetValue) && Array.isArray(sourceValue))\r\n                    ? deepMerge(targetValue, sourceValue)\r\n                    : sourceValue;\r\n        }\r\n        catch (_a) { }\r\n    }\r\n    return target;\r\n}\n\nfunction deepEqual(object1, object2, isErrorObject) {\r\n    if (isPrimitive(object1) ||\r\n        isPrimitive(object2) ||\r\n        object1 instanceof Date ||\r\n        object2 instanceof Date) {\r\n        return object1 === object2;\r\n    }\r\n    if (!Object(react[\"isValidElement\"])(object1)) {\r\n        const keys1 = Object.keys(object1);\r\n        const keys2 = Object.keys(object2);\r\n        if (keys1.length !== keys2.length) {\r\n            return false;\r\n        }\r\n        for (const key of keys1) {\r\n            const val1 = object1[key];\r\n            if (!(isErrorObject && key === 'ref')) {\r\n                const val2 = object2[key];\r\n                if ((isObject(val1) || Array.isArray(val1)) &&\r\n                    (isObject(val2) || Array.isArray(val2))\r\n                    ? !deepEqual(val1, val2, isErrorObject)\r\n                    : val1 !== val2) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\r\n    let index = -1;\r\n    while (++index < values.length) {\r\n        for (const key in values[index]) {\r\n            if (Array.isArray(values[index][key])) {\r\n                !dirtyFields[index] && (dirtyFields[index] = {});\r\n                dirtyFields[index][key] = [];\r\n                setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\r\n            }\r\n            else {\r\n                deepEqual(get(defaultValues[index] || {}, key), values[index][key])\r\n                    ? set(dirtyFields[index] || {}, key)\r\n                    : (dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), { [key]: true }));\r\n            }\r\n        }\r\n        parentNode &&\r\n            !dirtyFields.length &&\r\n            delete parentNode[parentName];\r\n    }\r\n    return dirtyFields;\r\n}\r\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fieldsRef, shallowFieldsState, shouldUnregister, excludeDisabled, search) => {\r\n    const output = {};\r\n    for (const name in fieldsRef.current) {\r\n        if (isUndefined(search) ||\r\n            (isString(search)\r\n                ? name.startsWith(search)\r\n                : Array.isArray(search) && search.find((data) => name.startsWith(data)))) {\r\n            output[name] = getFieldValue(fieldsRef, name, undefined, excludeDisabled);\r\n        }\r\n    }\r\n    return shouldUnregister\r\n        ? transformToNestObject(output)\r\n        : deepMerge(shallowFieldsState, transformToNestObject(output));\r\n};\n\nvar isErrorStateChanged = ({ errors, name, error, validFields, fieldsWithValidation, }) => {\r\n    const isValid = isUndefined(error);\r\n    const previousError = get(errors, name);\r\n    return ((isValid && !!previousError) ||\r\n        (!isValid && !deepEqual(previousError, error, true)) ||\r\n        (isValid && get(fieldsWithValidation, name) && !get(validFields, name)));\r\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isMessage = (value) => isString(value) || Object(react[\"isValidElement\"])(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) || (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? Object.assign(Object.assign({}, errors[name]), { types: Object.assign(Object.assign({}, (errors[name] && errors[name].types ? errors[name].types : {})), { [type]: message || true }) }) : {};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { value }, options, required, maxLength, minLength, min, max, pattern, validate, }, shallowFieldsStateRef) => {\r\n    const name = ref.name;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = value === '';\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message, ref: isRadioOrCheckbox\r\n                    ? ((fieldsRef.current[name].options || [])[0] || {}).ref\r\n                    : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNaN(value)) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            value.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            value.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && pattern && !isEmpty) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message,\r\n                ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef, false, true);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const [key, validateFunction] of Object.entries(validate)) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateResult = await validateFunction(fieldValue);\r\n                const validateError = getValidateError(validateResult, validateRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst getPath = (rootPath, values, paths = []) => {\r\n    for (const property in values) {\r\n        const rootName = (rootPath +\r\n            (isObject(values)\r\n                ? `.${property}`\r\n                : `[${property}]`));\r\n        isPrimitive(values[property])\r\n            ? paths.push(rootName)\r\n            : getPath(rootName, values[property], paths);\r\n    }\r\n    return paths;\r\n};\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, inputValue, isSingleField) => {\r\n    let value = undefined;\r\n    watchFields.add(fieldName);\r\n    if (!isEmptyObject(fieldValues)) {\r\n        value = get(fieldValues, fieldName);\r\n        if (isObject(value) || Array.isArray(value)) {\r\n            getPath(fieldName, value).forEach((name) => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isSingleField\r\n            ? inputValue\r\n            : get(inputValue, fieldName)\r\n        : value;\r\n};\n\nvar skipValidation = ({ isOnBlur, isOnChange, isOnTouch, isTouched, isReValidateOnBlur, isReValidateOnChange, isBlurEvent, isSubmitted, isOnAll, }) => {\r\n    if (isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? isReValidateOnChange : isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar getFieldArrayParentName = (name) => name.substring(0, name.indexOf('['));\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\r\nvar isNameInFieldArray = (names, name) => [...names].some((current) => isMatchFieldArrayName(name, current));\n\nvar isSelectInput = (element) => element.type === `${SELECT}-one`;\n\nfunction onDomRemove(fieldsRef, removeFieldEventListenerAndRef) {\r\n    const observer = new MutationObserver(() => {\r\n        for (const field of Object.values(fieldsRef.current)) {\r\n            if (field && field.options) {\r\n                for (const option of field.options) {\r\n                    if (option && option.ref && isDetached(option.ref)) {\r\n                        removeFieldEventListenerAndRef(field);\r\n                    }\r\n                }\r\n            }\r\n            else if (field && isDetached(field.ref)) {\r\n                removeFieldEventListenerAndRef(field);\r\n            }\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nvar isWeb = typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    if (isPrimitive(data) ||\r\n        (isWeb && (data instanceof File || isHTMLElement(data)))) {\r\n        return data;\r\n    }\r\n    if (data instanceof Date) {\r\n        copy = new Date(data.getTime());\r\n        return copy;\r\n    }\r\n    if (data instanceof Set) {\r\n        copy = new Set();\r\n        for (const item of data) {\r\n            copy.add(item);\r\n        }\r\n        return copy;\r\n    }\r\n    if (data instanceof Map) {\r\n        copy = new Map();\r\n        for (const key of data.keys()) {\r\n            copy.set(key, cloneObject(data.get(key)));\r\n        }\r\n        return copy;\r\n    }\r\n    copy = Array.isArray(data) ? [] : {};\r\n    for (const key in data) {\r\n        copy[key] = cloneObject(data[key]);\r\n    }\r\n    return copy;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nvar isRadioOrCheckboxFunction = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nconst isWindowUndefined = typeof window === UNDEFINED;\r\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, resolver, context, defaultValues = {}, shouldFocusError = true, shouldUnregister = true, criteriaMode, } = {}) {\r\n    const fieldsRef = Object(react[\"useRef\"])({});\r\n    const fieldArrayDefaultValuesRef = Object(react[\"useRef\"])({});\r\n    const fieldArrayValuesRef = Object(react[\"useRef\"])({});\r\n    const watchFieldsRef = Object(react[\"useRef\"])(new Set());\r\n    const useWatchFieldsRef = Object(react[\"useRef\"])({});\r\n    const useWatchRenderFunctionsRef = Object(react[\"useRef\"])({});\r\n    const fieldsWithValidationRef = Object(react[\"useRef\"])({});\r\n    const validFieldsRef = Object(react[\"useRef\"])({});\r\n    const defaultValuesRef = Object(react[\"useRef\"])(defaultValues);\r\n    const isUnMount = Object(react[\"useRef\"])(false);\r\n    const isWatchAllRef = Object(react[\"useRef\"])(false);\r\n    const handleChangeRef = Object(react[\"useRef\"])();\r\n    const shallowFieldsStateRef = Object(react[\"useRef\"])({});\r\n    const resetFieldArrayFunctionRef = Object(react[\"useRef\"])({});\r\n    const contextRef = Object(react[\"useRef\"])(context);\r\n    const resolverRef = Object(react[\"useRef\"])(resolver);\r\n    const fieldArrayNamesRef = Object(react[\"useRef\"])(new Set());\r\n    const modeRef = Object(react[\"useRef\"])(modeChecker(mode));\r\n    const { isOnSubmit, isOnTouch } = modeRef.current;\r\n    const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\r\n    const [formState, setFormState] = Object(react[\"useState\"])({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touched: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: !isOnSubmit,\r\n        errors: {},\r\n    });\r\n    const readFormStateRef = Object(react[\"useRef\"])({\r\n        isDirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        touched: !isProxyEnabled || isOnTouch,\r\n        isValidating: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const formStateRef = Object(react[\"useRef\"])(formState);\r\n    const observerRef = Object(react[\"useRef\"])();\r\n    const { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange, } = Object(react[\"useRef\"])(modeChecker(reValidateMode)).current;\r\n    contextRef.current = context;\r\n    resolverRef.current = resolver;\r\n    formStateRef.current = formState;\r\n    shallowFieldsStateRef.current = shouldUnregister\r\n        ? {}\r\n        : isEmptyObject(shallowFieldsStateRef.current)\r\n            ? cloneObject(defaultValues)\r\n            : shallowFieldsStateRef.current;\r\n    const updateFormState = Object(react[\"useCallback\"])((state = {}) => {\r\n        if (!isUnMount.current) {\r\n            formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), state);\r\n            setFormState(formStateRef.current);\r\n        }\r\n    }, []);\r\n    const updateIsValidating = () => readFormStateRef.current.isValidating &&\r\n        updateFormState({\r\n            isValidating: true,\r\n        });\r\n    const shouldRenderBaseOnError = Object(react[\"useCallback\"])((name, error, shouldRender = false, state = {}, isValid) => {\r\n        let shouldReRender = shouldRender ||\r\n            isErrorStateChanged({\r\n                errors: formStateRef.current.errors,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        const previousError = get(formStateRef.current.errors, name);\r\n        if (error) {\r\n            unset(validFieldsRef.current, name);\r\n            shouldReRender =\r\n                shouldReRender ||\r\n                    !previousError ||\r\n                    !deepEqual(previousError, error, true);\r\n            set(formStateRef.current.errors, name, error);\r\n        }\r\n        else {\r\n            if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\r\n                set(validFieldsRef.current, name, true);\r\n                shouldReRender = shouldReRender || previousError;\r\n            }\r\n            unset(formStateRef.current.errors, name);\r\n        }\r\n        if ((shouldReRender && !isNullOrUndefined(shouldRender)) ||\r\n            !isEmptyObject(state) ||\r\n            readFormStateRef.current.isValidating) {\r\n            updateFormState(Object.assign(Object.assign(Object.assign({}, state), (resolverRef.current ? { isValid: !!isValid } : {})), { isValidating: false }));\r\n        }\r\n    }, []);\r\n    const setFieldValue = Object(react[\"useCallback\"])((name, rawValue) => {\r\n        const { ref, options } = fieldsRef.current[name];\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref)) {\r\n            (options || []).forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref) && !isString(value)) {\r\n            ref.files = value;\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach((selectRef) => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = Array.isArray(value)\r\n                    ? !!value.find((data) => data === checkboxRef.value)\r\n                    : value === checkboxRef.value))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n    }, []);\r\n    const isFormDirty = Object(react[\"useCallback\"])((name, data) => {\r\n        if (readFormStateRef.current.isDirty) {\r\n            const formValues = getValues();\r\n            name && data && set(formValues, name, data);\r\n            return !deepEqual(formValues, defaultValuesRef.current);\r\n        }\r\n        return false;\r\n    }, []);\r\n    const updateAndGetDirtyState = Object(react[\"useCallback\"])((name, shouldRender = true) => {\r\n        if (readFormStateRef.current.isDirty ||\r\n            readFormStateRef.current.dirtyFields) {\r\n            const isFieldDirty = !deepEqual(get(defaultValuesRef.current, name), getFieldValue(fieldsRef, name, shallowFieldsStateRef));\r\n            const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\r\n            const previousIsDirty = formStateRef.current.isDirty;\r\n            isFieldDirty\r\n                ? set(formStateRef.current.dirtyFields, name, true)\r\n                : unset(formStateRef.current.dirtyFields, name);\r\n            const state = {\r\n                isDirty: isFormDirty(),\r\n                dirtyFields: formStateRef.current.dirtyFields,\r\n            };\r\n            const isChanged = (readFormStateRef.current.isDirty &&\r\n                previousIsDirty !== state.isDirty) ||\r\n                (readFormStateRef.current.dirtyFields &&\r\n                    isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\r\n            isChanged && shouldRender && updateFormState(state);\r\n            return isChanged ? state : {};\r\n        }\r\n        return {};\r\n    }, []);\r\n    const executeValidation = Object(react[\"useCallback\"])(async (name, skipReRender) => {\r\n        if (false) {}\r\n        const error = (await validateField(fieldsRef, isValidateAllFieldCriteria, fieldsRef.current[name], shallowFieldsStateRef))[name];\r\n        shouldRenderBaseOnError(name, error, skipReRender);\r\n        return isUndefined(error);\r\n    }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\r\n    const executeSchemaOrResolverValidation = Object(react[\"useCallback\"])(async (names) => {\r\n        const { errors } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\r\n        const previousFormIsValid = formStateRef.current.isValid;\r\n        if (Array.isArray(names)) {\r\n            const isInputsValid = names\r\n                .map((name) => {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(formStateRef.current.errors, name, error)\r\n                    : unset(formStateRef.current.errors, name);\r\n                return !error;\r\n            })\r\n                .every(Boolean);\r\n            updateFormState({\r\n                isValid: isEmptyObject(errors),\r\n                isValidating: false,\r\n            });\r\n            return isInputsValid;\r\n        }\r\n        else {\r\n            const error = get(errors, names);\r\n            shouldRenderBaseOnError(names, error, previousFormIsValid !== isEmptyObject(errors), {}, isEmptyObject(errors));\r\n            return !error;\r\n        }\r\n    }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\r\n    const trigger = Object(react[\"useCallback\"])(async (name) => {\r\n        const fields = name || Object.keys(fieldsRef.current);\r\n        updateIsValidating();\r\n        if (resolverRef.current) {\r\n            return executeSchemaOrResolverValidation(fields);\r\n        }\r\n        if (Array.isArray(fields)) {\r\n            !name && (formStateRef.current.errors = {});\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, null)));\r\n            updateFormState({\r\n                isValidating: false,\r\n            });\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [executeSchemaOrResolverValidation, executeValidation]);\r\n    const setInternalValues = Object(react[\"useCallback\"])((name, value, { shouldDirty, shouldValidate }) => {\r\n        const data = {};\r\n        set(data, name, value);\r\n        for (const fieldName of getPath(name, value)) {\r\n            if (fieldsRef.current[fieldName]) {\r\n                setFieldValue(fieldName, get(data, fieldName));\r\n                shouldDirty && updateAndGetDirtyState(fieldName);\r\n                shouldValidate && trigger(fieldName);\r\n            }\r\n        }\r\n    }, [trigger, setFieldValue, updateAndGetDirtyState]);\r\n    const setInternalValue = Object(react[\"useCallback\"])((name, value, config) => {\r\n        !shouldUnregister &&\r\n            !isPrimitive(value) &&\r\n            set(shallowFieldsStateRef.current, name, Object.assign({}, value));\r\n        if (fieldsRef.current[name]) {\r\n            setFieldValue(name, value);\r\n            config.shouldDirty && updateAndGetDirtyState(name);\r\n            config.shouldValidate && trigger(name);\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValues(name, value, config);\r\n            if (fieldArrayNamesRef.current.has(name)) {\r\n                const parentName = getFieldArrayParentName(name) || name;\r\n                set(fieldArrayDefaultValuesRef.current, name, value);\r\n                resetFieldArrayFunctionRef.current[parentName]({\r\n                    [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\r\n                });\r\n                if ((readFormStateRef.current.isDirty ||\r\n                    readFormStateRef.current.dirtyFields) &&\r\n                    config.shouldDirty) {\r\n                    set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n                    updateFormState({\r\n                        isDirty: !deepEqual(Object.assign(Object.assign({}, getValues()), { [name]: value }), defaultValuesRef.current),\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\r\n    }, [updateAndGetDirtyState, setFieldValue, setInternalValues]);\r\n    const isFieldWatched = (name) => isWatchAllRef.current ||\r\n        watchFieldsRef.current.has(name) ||\r\n        watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\r\n    const renderWatchedInputs = (name) => {\r\n        let found = true;\r\n        if (!isEmptyObject(useWatchFieldsRef.current)) {\r\n            for (const key in useWatchFieldsRef.current) {\r\n                if (!name ||\r\n                    !useWatchFieldsRef.current[key].size ||\r\n                    useWatchFieldsRef.current[key].has(name) ||\r\n                    useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))) {\r\n                    useWatchRenderFunctionsRef.current[key]();\r\n                    found = false;\r\n                }\r\n            }\r\n        }\r\n        return found;\r\n    };\r\n    function setValue(name, value, config) {\r\n        setInternalValue(name, value, config || {});\r\n        isFieldWatched(name) && updateFormState();\r\n        renderWatchedInputs(name);\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            let name = target.name;\r\n            const field = fieldsRef.current[name];\r\n            let error;\r\n            let isValid;\r\n            if (field) {\r\n                const isBlurEvent = type === EVENTS.BLUR;\r\n                const shouldSkipValidation = skipValidation(Object.assign({ isBlurEvent,\r\n                    isReValidateOnChange,\r\n                    isReValidateOnBlur, isTouched: !!get(formStateRef.current.touched, name), isSubmitted: formStateRef.current.isSubmitted }, modeRef.current));\r\n                let state = updateAndGetDirtyState(name, false);\r\n                let shouldRender = !isEmptyObject(state) ||\r\n                    (!isBlurEvent && isFieldWatched(name));\r\n                if (isBlurEvent &&\r\n                    !get(formStateRef.current.touched, name) &&\r\n                    readFormStateRef.current.touched) {\r\n                    set(formStateRef.current.touched, name, true);\r\n                    state = Object.assign(Object.assign({}, state), { touched: formStateRef.current.touched });\r\n                }\r\n                if (!shouldUnregister && isCheckBoxInput(target)) {\r\n                    set(shallowFieldsStateRef.current, name, getFieldValue(fieldsRef, name));\r\n                }\r\n                if (shouldSkipValidation) {\r\n                    !isBlurEvent && renderWatchedInputs(name);\r\n                    return ((!isEmptyObject(state) ||\r\n                        (shouldRender && isEmptyObject(state))) &&\r\n                        updateFormState(state));\r\n                }\r\n                updateIsValidating();\r\n                if (resolverRef.current) {\r\n                    const { errors } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\r\n                    const previousFormIsValid = formStateRef.current.isValid;\r\n                    error = get(errors, name);\r\n                    if (isCheckBoxInput(target) &&\r\n                        !error &&\r\n                        resolverRef.current) {\r\n                        const parentNodeName = getFieldArrayParentName(name);\r\n                        const currentError = get(errors, parentNodeName, {});\r\n                        currentError.type &&\r\n                            currentError.message &&\r\n                            (error = currentError);\r\n                        if (parentNodeName &&\r\n                            (currentError ||\r\n                                get(formStateRef.current.errors, parentNodeName))) {\r\n                            name = parentNodeName;\r\n                        }\r\n                    }\r\n                    isValid = isEmptyObject(errors);\r\n                    previousFormIsValid !== isValid && (shouldRender = true);\r\n                }\r\n                else {\r\n                    error = (await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef))[name];\r\n                }\r\n                !isBlurEvent && renderWatchedInputs(name);\r\n                shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\r\n            }\r\n        };\r\n    function setFieldArrayDefaultValues(data) {\r\n        if (!shouldUnregister) {\r\n            let copy = cloneObject(data);\r\n            for (const value of fieldArrayNamesRef.current) {\r\n                if (isKey(value) && !copy[value]) {\r\n                    copy = Object.assign(Object.assign({}, copy), { [value]: [] });\r\n                }\r\n            }\r\n            return copy;\r\n        }\r\n        return data;\r\n    }\r\n    function getValues(payload) {\r\n        if (isString(payload)) {\r\n            return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\r\n        }\r\n        if (Array.isArray(payload)) {\r\n            const data = {};\r\n            for (const name of payload) {\r\n                set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\r\n            }\r\n            return data;\r\n        }\r\n        return setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister));\r\n    }\r\n    const validateResolver = Object(react[\"useCallback\"])(async (values = {}) => {\r\n        const newDefaultValues = isEmptyObject(fieldsRef.current)\r\n            ? defaultValuesRef.current\r\n            : {};\r\n        const { errors } = (await resolverRef.current(Object.assign(Object.assign(Object.assign({}, newDefaultValues), getValues()), values), contextRef.current, isValidateAllFieldCriteria)) || {};\r\n        const isValid = isEmptyObject(errors);\r\n        formStateRef.current.isValid !== isValid &&\r\n            updateFormState({\r\n                isValid,\r\n            });\r\n    }, [isValidateAllFieldCriteria]);\r\n    const removeFieldEventListener = Object(react[\"useCallback\"])((field, forceDelete) => {\r\n        findRemovedFieldAndRemoveListener(fieldsRef, handleChangeRef.current, field, shallowFieldsStateRef, shouldUnregister, forceDelete);\r\n        if (shouldUnregister) {\r\n            unset(validFieldsRef.current, field.ref.name);\r\n            unset(fieldsWithValidationRef.current, field.ref.name);\r\n        }\r\n    }, [shouldUnregister]);\r\n    const updateWatchedValue = Object(react[\"useCallback\"])((name) => {\r\n        if (isWatchAllRef.current) {\r\n            updateFormState();\r\n        }\r\n        else {\r\n            for (const watchField of watchFieldsRef.current) {\r\n                if (watchField.startsWith(name)) {\r\n                    updateFormState();\r\n                    break;\r\n                }\r\n            }\r\n            renderWatchedInputs(name);\r\n        }\r\n    }, []);\r\n    const removeFieldEventListenerAndRef = Object(react[\"useCallback\"])((field, forceDelete) => {\r\n        if (field) {\r\n            removeFieldEventListener(field, forceDelete);\r\n            if (shouldUnregister && !compact(field.options || []).length) {\r\n                unset(formStateRef.current.errors, field.ref.name);\r\n                set(formStateRef.current.dirtyFields, field.ref.name, true);\r\n                updateFormState({\r\n                    isDirty: isFormDirty(),\r\n                });\r\n                readFormStateRef.current.isValid &&\r\n                    resolverRef.current &&\r\n                    validateResolver();\r\n                updateWatchedValue(field.ref.name);\r\n            }\r\n        }\r\n    }, [validateResolver, removeFieldEventListener]);\r\n    function clearErrors(name) {\r\n        name &&\r\n            (Array.isArray(name) ? name : [name]).forEach((inputName) => fieldsRef.current[inputName] && isKey(inputName)\r\n                ? delete formStateRef.current.errors[inputName]\r\n                : unset(formStateRef.current.errors, inputName));\r\n        updateFormState({\r\n            errors: name ? formStateRef.current.errors : {},\r\n        });\r\n    }\r\n    function setError(name, error) {\r\n        const ref = (fieldsRef.current[name] || {}).ref;\r\n        set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), { ref }));\r\n        updateFormState({\r\n            isValid: false,\r\n        });\r\n        error.shouldFocus && ref && ref.focus && ref.focus();\r\n    }\r\n    const watchInternal = Object(react[\"useCallback\"])((fieldNames, defaultValue, watchId) => {\r\n        const watchFields = watchId\r\n            ? useWatchFieldsRef.current[watchId]\r\n            : watchFieldsRef.current;\r\n        let fieldValues = getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, false, fieldNames);\r\n        if (isString(fieldNames)) {\r\n            const parentNodeName = getFieldArrayParentName(fieldNames) || fieldNames;\r\n            if (fieldArrayNamesRef.current.has(parentNodeName)) {\r\n                fieldValues = Object.assign(Object.assign({}, fieldArrayValuesRef.current), fieldValues);\r\n            }\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, isUndefined(get(defaultValuesRef.current, fieldNames))\r\n                ? defaultValue\r\n                : get(defaultValuesRef.current, fieldNames), true);\r\n        }\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? defaultValuesRef.current\r\n            : defaultValue;\r\n        if (Array.isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});\r\n        }\r\n        isWatchAllRef.current = isUndefined(watchId);\r\n        return transformToNestObject((!isEmptyObject(fieldValues) && fieldValues) ||\r\n            combinedDefaultValues);\r\n    }, []);\r\n    function watch(fieldNames, defaultValue) {\r\n        return watchInternal(fieldNames, defaultValue);\r\n    }\r\n    function unregister(name) {\r\n        for (const fieldName of Array.isArray(name) ? name : [name]) {\r\n            removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\r\n        }\r\n    }\r\n    function registerFieldRef(ref, options = {}) {\r\n        if (false) {}\r\n        const { name, type, value } = ref;\r\n        const fieldRefAndValidationOptions = Object.assign({ ref }, options);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const compareRef = (currentRef) => isWeb && (!isHTMLElement(ref) || currentRef === ref);\r\n        let field = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let defaultValue;\r\n        if (field &&\r\n            (isRadioOrCheckbox\r\n                ? Array.isArray(field.options) &&\r\n                    compact(field.options).find((option) => {\r\n                        return value === option.ref.value && compareRef(option.ref);\r\n                    })\r\n                : compareRef(field.ref))) {\r\n            fields[name] = Object.assign(Object.assign({}, field), options);\r\n            return;\r\n        }\r\n        if (type) {\r\n            field = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...compact((field && field.options) || []),\r\n                        {\r\n                            ref,\r\n                        },\r\n                    ], ref: { type, name } }, options) : Object.assign({}, fieldRefAndValidationOptions);\r\n        }\r\n        else {\r\n            field = fieldRefAndValidationOptions;\r\n        }\r\n        fields[name] = field;\r\n        const isEmptyUnmountFields = isUndefined(get(shallowFieldsStateRef.current, name));\r\n        if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\r\n            defaultValue = get(isEmptyUnmountFields\r\n                ? defaultValuesRef.current\r\n                : shallowFieldsStateRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(name, defaultValue);\r\n            }\r\n        }\r\n        if (!isEmptyObject(options)) {\r\n            set(fieldsWithValidationRef.current, name, true);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef).then((error) => {\r\n                    const previousFormIsValid = formStateRef.current.isValid;\r\n                    isEmptyObject(error)\r\n                        ? set(validFieldsRef.current, name, true)\r\n                        : unset(validFieldsRef.current, name);\r\n                    previousFormIsValid !== isEmptyObject(error) && updateFormState();\r\n                });\r\n            }\r\n        }\r\n        if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\r\n            !isFieldArray && unset(formStateRef.current.dirtyFields, name);\r\n        }\r\n        if (type) {\r\n            attachEventListeners(isRadioOrCheckbox && field.options\r\n                ? field.options[field.options.length - 1]\r\n                : field, isRadioOrCheckbox || isSelectInput(ref), handleChangeRef.current);\r\n        }\r\n    }\r\n    function register(refOrRegisterOptions, options) {\r\n        if (!isWindowUndefined) {\r\n            if (isString(refOrRegisterOptions)) {\r\n                registerFieldRef({ name: refOrRegisterOptions }, options);\r\n            }\r\n            else if (isObject(refOrRegisterOptions) &&\r\n                'name' in refOrRegisterOptions) {\r\n                registerFieldRef(refOrRegisterOptions, options);\r\n            }\r\n            else {\r\n                return (ref) => ref && registerFieldRef(ref, refOrRegisterOptions);\r\n            }\r\n        }\r\n    }\r\n    const handleSubmit = Object(react[\"useCallback\"])((onValid, onInvalid) => async (e) => {\r\n        if (e && e.preventDefault) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors = {};\r\n        let fieldValues = setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, true));\r\n        readFormStateRef.current.isSubmitting &&\r\n            updateFormState({\r\n                isSubmitting: true,\r\n            });\r\n        try {\r\n            if (resolverRef.current) {\r\n                const { errors, values } = await resolverRef.current(fieldValues, contextRef.current, isValidateAllFieldCriteria);\r\n                formStateRef.current.errors = fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                for (const field of Object.values(fieldsRef.current)) {\r\n                    if (field) {\r\n                        const { name } = field.ref;\r\n                        const fieldError = await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef);\r\n                        if (fieldError[name]) {\r\n                            set(fieldErrors, name, fieldError[name]);\r\n                            unset(validFieldsRef.current, name);\r\n                        }\r\n                        else if (get(fieldsWithValidationRef.current, name)) {\r\n                            unset(formStateRef.current.errors, name);\r\n                            set(validFieldsRef.current, name, true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyObject(fieldErrors) &&\r\n                Object.keys(formStateRef.current.errors).every((name) => name in fieldsRef.current)) {\r\n                updateFormState({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                formStateRef.current.errors = Object.assign(Object.assign({}, formStateRef.current.errors), fieldErrors);\r\n                onInvalid && (await onInvalid(formStateRef.current.errors, e));\r\n                shouldFocusError &&\r\n                    focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\r\n            }\r\n        }\r\n        finally {\r\n            formStateRef.current.isSubmitting = false;\r\n            updateFormState({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\r\n                submitCount: formStateRef.current.submitCount + 1,\r\n            });\r\n        }\r\n    }, [shouldFocusError, isValidateAllFieldCriteria]);\r\n    const resetRefs = ({ errors, isDirty, isSubmitted, touched, isValid, submitCount, dirtyFields, }) => {\r\n        if (!isValid) {\r\n            validFieldsRef.current = {};\r\n            fieldsWithValidationRef.current = {};\r\n        }\r\n        fieldArrayDefaultValuesRef.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n        updateFormState({\r\n            submitCount: submitCount ? formStateRef.current.submitCount : 0,\r\n            isDirty: isDirty ? formStateRef.current.isDirty : false,\r\n            isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\r\n            isValid: isValid ? formStateRef.current.isValid : false,\r\n            dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\r\n            touched: touched ? formStateRef.current.touched : {},\r\n            errors: errors ? formStateRef.current.errors : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const reset = (values, omitResetState = {}) => {\r\n        if (isWeb) {\r\n            for (const field of Object.values(fieldsRef.current)) {\r\n                if (field) {\r\n                    const { ref, options } = field;\r\n                    const inputRef = isRadioOrCheckboxFunction(ref) && Array.isArray(options)\r\n                        ? options[0].ref\r\n                        : ref;\r\n                    if (isHTMLElement(inputRef)) {\r\n                        try {\r\n                            inputRef.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        fieldsRef.current = {};\r\n        defaultValuesRef.current = Object.assign({}, (values || defaultValuesRef.current));\r\n        values && renderWatchedInputs('');\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach((resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray());\r\n        shallowFieldsStateRef.current = shouldUnregister\r\n            ? {}\r\n            : cloneObject(values || defaultValuesRef.current);\r\n        resetRefs(omitResetState);\r\n    };\r\n    Object(react[\"useEffect\"])(() => {\r\n        resolver && readFormStateRef.current.isValid && validateResolver();\r\n        observerRef.current =\r\n            observerRef.current || !isWeb\r\n                ? observerRef.current\r\n                : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\r\n    }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\r\n    Object(react[\"useEffect\"])(() => () => {\r\n        observerRef.current && observerRef.current.disconnect();\r\n        isUnMount.current = true;\r\n        if (false) {}\r\n        Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, []);\r\n    if (!resolver && readFormStateRef.current.isValid) {\r\n        formState.isValid =\r\n            deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\r\n                isEmptyObject(formStateRef.current.errors);\r\n    }\r\n    const commonProps = {\r\n        trigger,\r\n        setValue: Object(react[\"useCallback\"])(setValue, [setInternalValue, trigger]),\r\n        getValues: Object(react[\"useCallback\"])(getValues, []),\r\n        register: Object(react[\"useCallback\"])(register, [defaultValuesRef.current]),\r\n        unregister: Object(react[\"useCallback\"])(unregister, []),\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (false) {}\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return undefined;\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n    const control = Object(react[\"useMemo\"])(() => (Object.assign({ isFormDirty,\r\n        updateWatchedValue,\r\n        shouldUnregister,\r\n        updateFormState,\r\n        removeFieldEventListener,\r\n        watchInternal, mode: modeRef.current, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnChange,\r\n        }, validateResolver: resolver ? validateResolver : undefined, fieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        useWatchFieldsRef,\r\n        useWatchRenderFunctionsRef,\r\n        fieldArrayDefaultValuesRef,\r\n        validFieldsRef,\r\n        fieldsWithValidationRef,\r\n        fieldArrayNamesRef,\r\n        readFormStateRef,\r\n        formStateRef,\r\n        defaultValuesRef,\r\n        shallowFieldsStateRef,\r\n        fieldArrayValuesRef }, commonProps)), [\r\n        defaultValuesRef.current,\r\n        updateWatchedValue,\r\n        shouldUnregister,\r\n        removeFieldEventListener,\r\n        watchInternal,\r\n    ]);\r\n    return Object.assign({ watch,\r\n        control,\r\n        handleSubmit, reset: Object(react[\"useCallback\"])(reset, []), clearErrors: Object(react[\"useCallback\"])(clearErrors, []), setError: Object(react[\"useCallback\"])(setError, []), errors: formState.errors }, commonProps);\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormContext = Object(react[\"createContext\"])(null);\r\nFormContext.displayName = 'RHFContext';\r\nconst useFormContext = () => Object(react[\"useContext\"])(FormContext);\r\nconst FormProvider = (_a) => {\r\n    var { children } = _a, props = __rest(_a, [\"children\"]);\r\n    return (Object(react[\"createElement\"])(FormContext.Provider, { value: Object.assign({}, props) }, children));\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, (Array.isArray(index) ? index : [index]).sort());\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (Array.isArray(data)) {\r\n        if (isUndefined(data[to])) {\r\n            data[to] = undefined;\r\n        }\r\n        data.splice(to, 0, data.splice(from, 1)[0]);\r\n        return data;\r\n    }\r\n    return [];\r\n};\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    const temp = [data[indexB], data[indexA]];\r\n    data[indexA] = temp[0];\r\n    data[indexB] = temp[1];\r\n};\n\nfunction prepend(data, value) {\r\n    return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\r\n}\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...(Array.isArray(value) ? value : [value || undefined]),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n\nvar fillBooleanArray = (value) => (Array.isArray(value) ? value : [value]).map((data) => {\r\n    if (isObject(data)) {\r\n        const object = {};\r\n        for (const key in data) {\r\n            object[key] = true;\r\n        }\r\n        return object;\r\n    }\r\n    return true;\r\n});\n\nconst mapIds = (values = [], keyName, skipWarn) => {\r\n    if (false) {}\r\n    return values.map((value) => (Object.assign({ [keyName]: value[keyName] || generateId() }, value)));\r\n};\r\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    if (false) {}\r\n    const focusIndexRef = Object(react[\"useRef\"])(-1);\r\n    const isUnMount = Object(react[\"useRef\"])(false);\r\n    const { isFormDirty, updateWatchedValue, resetFieldArrayFunctionRef, fieldArrayNamesRef, fieldsRef, defaultValuesRef, removeFieldEventListener, formStateRef, shallowFieldsStateRef, updateFormState, readFormStateRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValuesRef, validateResolver, getValues, shouldUnregister, fieldArrayValuesRef, } = control || methods.control;\r\n    const getDefaultValues = (values) => get(shouldUnregister ? values : shallowFieldsStateRef.current, name, []);\r\n    const fieldArrayParentName = getFieldArrayParentName(name);\r\n    const memoizedDefaultValues = Object(react[\"useRef\"])([\r\n        ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\r\n            ? getDefaultValues(fieldArrayDefaultValuesRef.current)\r\n            : getDefaultValues(defaultValuesRef.current)),\r\n    ]);\r\n    const [fields, setFields] = Object(react[\"useState\"])(mapIds(memoizedDefaultValues.current, keyName));\r\n    set(fieldArrayValuesRef.current, name, fields);\r\n    const omitKey = (fields) => fields.map((_a = {}) => {\r\n        var _b = keyName, omitted = _a[_b], rest = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\r\n        return rest;\r\n    });\r\n    fieldArrayNamesRef.current.add(name);\r\n    const getFieldArrayValue = Object(react[\"useCallback\"])(() => get(fieldArrayValuesRef.current, name, []), [name]);\r\n    const getCurrentFieldsValues = () => mapIds(get(getValues(), name, getFieldArrayValue()).map((item, index) => (Object.assign(Object.assign({}, getFieldArrayValue()[index]), item))), keyName, true);\r\n    fieldArrayNamesRef.current.add(name);\r\n    if (fieldArrayParentName &&\r\n        !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\r\n        set(fieldArrayDefaultValuesRef.current, fieldArrayParentName, cloneObject(get(defaultValuesRef.current, fieldArrayParentName)));\r\n    }\r\n    const setFieldAndValidState = (fieldsValues) => {\r\n        setFields(fieldsValues);\r\n        set(fieldArrayValuesRef.current, name, fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateResolver) {\r\n            const values = getValues();\r\n            set(values, name, fieldsValues);\r\n            validateResolver(values);\r\n        }\r\n    };\r\n    const resetFields = () => {\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name)) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n                delete fieldsRef.current[key];\r\n            }\r\n        }\r\n    };\r\n    const cleanup = (ref) => !compact(get(ref, name, [])).length && unset(ref, name);\r\n    const updateDirtyFieldsWithDefaultValues = (updatedFieldArrayValues) => {\r\n        if (updatedFieldArrayValues) {\r\n            set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n        }\r\n    };\r\n    const batchStateUpdate = (method, args, updatedFieldValues, updatedFormValues = [], shouldSet = true, shouldUpdateValid = false) => {\r\n        if (get(shallowFieldsStateRef.current, name)) {\r\n            const output = method(get(shallowFieldsStateRef.current, name), args.argA, args.argB);\r\n            shouldSet && set(shallowFieldsStateRef.current, name, output);\r\n        }\r\n        if (get(fieldArrayDefaultValuesRef.current, name)) {\r\n            const output = method(get(fieldArrayDefaultValuesRef.current, name), args.argA, args.argB);\r\n            shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\r\n        }\r\n        if (Array.isArray(get(formStateRef.current.errors, name))) {\r\n            const output = method(get(formStateRef.current.errors, name), args.argA, args.argB);\r\n            shouldSet && set(formStateRef.current.errors, name, output);\r\n            cleanup(formStateRef.current.errors);\r\n        }\r\n        if (readFormStateRef.current.touched &&\r\n            get(formStateRef.current.touched, name)) {\r\n            const output = method(get(formStateRef.current.touched, name), args.argA, args.argB);\r\n            shouldSet && set(formStateRef.current.touched, name, output);\r\n            cleanup(formStateRef.current.touched);\r\n        }\r\n        if (readFormStateRef.current.dirtyFields ||\r\n            readFormStateRef.current.isDirty) {\r\n            set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFormValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n            updateDirtyFieldsWithDefaultValues(updatedFieldValues);\r\n            cleanup(formStateRef.current.dirtyFields);\r\n        }\r\n        if (shouldUpdateValid &&\r\n            readFormStateRef.current.isValid &&\r\n            !validateResolver) {\r\n            set(validFieldsRef.current, name, method(get(validFieldsRef.current, name, []), args.argA));\r\n            cleanup(validFieldsRef.current);\r\n            set(fieldsWithValidationRef.current, name, method(get(fieldsWithValidationRef.current, name, []), args.argA));\r\n            cleanup(fieldsWithValidationRef.current);\r\n        }\r\n        if (!isUnMount.current && readFormStateRef.current.isDirty) {\r\n            updateFormState({\r\n                isDirty: isFormDirty(name, omitKey(updatedFormValues)),\r\n            });\r\n        }\r\n    };\r\n    const append = (value, shouldFocus = true) => {\r\n        const appendValue = Array.isArray(value) ? value : [value];\r\n        const updateFormValues = [\r\n            ...getCurrentFieldsValues(),\r\n            ...mapIds(appendValue, keyName),\r\n        ];\r\n        setFieldAndValidState(updateFormValues);\r\n        if (readFormStateRef.current.dirtyFields ||\r\n            readFormStateRef.current.isDirty) {\r\n            updateDirtyFieldsWithDefaultValues(updateFormValues);\r\n            updateFormState({\r\n                isDirty: true,\r\n                dirtyFields: formStateRef.current.dirtyFields,\r\n            });\r\n        }\r\n        !shouldUnregister &&\r\n            set(shallowFieldsStateRef.current, name, [\r\n                ...(get(shallowFieldsStateRef.current, name) || []),\r\n                ...cloneObject(appendValue),\r\n            ]);\r\n        focusIndexRef.current = shouldFocus\r\n            ? get(fieldArrayValuesRef.current, name).length - 1\r\n            : -1;\r\n    };\r\n    const prepend$1 = (value, shouldFocus = true) => {\r\n        const emptyArray = fillEmptyArray(value);\r\n        const updatedFieldArrayValues = prepend(getCurrentFieldsValues(), mapIds(Array.isArray(value) ? value : [value], keyName));\r\n        setFieldAndValidState(updatedFieldArrayValues);\r\n        resetFields();\r\n        batchStateUpdate(prepend, {\r\n            argA: emptyArray,\r\n            argC: fillBooleanArray(value),\r\n        }, updatedFieldArrayValues);\r\n        focusIndexRef.current = shouldFocus ? 0 : -1;\r\n    };\r\n    const remove = (index) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        const updatedFieldValues = removeArrayAt(fieldValues, index);\r\n        setFieldAndValidState(updatedFieldValues);\r\n        resetFields();\r\n        batchStateUpdate(removeArrayAt, {\r\n            argA: index,\r\n            argC: index,\r\n        }, updatedFieldValues, removeArrayAt(fieldValues, index), true, true);\r\n    };\r\n    const insert$1 = (index, value, shouldFocus = true) => {\r\n        const emptyArray = fillEmptyArray(value);\r\n        const fieldValues = getCurrentFieldsValues();\r\n        const updatedFieldArrayValues = insert(fieldValues, index, mapIds(Array.isArray(value) ? value : [value], keyName));\r\n        setFieldAndValidState(updatedFieldArrayValues);\r\n        resetFields();\r\n        batchStateUpdate(insert, {\r\n            argA: index,\r\n            argB: emptyArray,\r\n            argC: index,\r\n            argD: fillBooleanArray(value),\r\n        }, updatedFieldArrayValues, insert(fieldValues, index));\r\n        focusIndexRef.current = shouldFocus ? index : -1;\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields();\r\n        setFieldAndValidState([...fieldValues]);\r\n        batchStateUpdate(swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n            argC: indexA,\r\n            argD: indexB,\r\n        }, undefined, fieldValues, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields();\r\n        setFieldAndValidState([...fieldValues]);\r\n        batchStateUpdate(moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n            argC: from,\r\n            argD: to,\r\n        }, undefined, fieldValues, false);\r\n    };\r\n    Object(react[\"useEffect\"])(() => {\r\n        if (false) {}\r\n        const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\r\n        if (defaultValues && fields.length < defaultValues.length) {\r\n            set(fieldArrayDefaultValuesRef.current, name, defaultValues.slice(1));\r\n        }\r\n        updateWatchedValue(name);\r\n        if (focusIndexRef.current > -1) {\r\n            for (const key in fieldsRef.current) {\r\n                const field = fieldsRef.current[key];\r\n                if (key.startsWith(`${name}[${focusIndexRef.current}]`) &&\r\n                    field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        focusIndexRef.current = -1;\r\n    }, [fields, name]);\r\n    Object(react[\"useEffect\"])(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        if (!getFieldArrayParentName(name)) {\r\n            resetFunctions[name] = (data) => {\r\n                resetFields();\r\n                !data && unset(fieldArrayDefaultValuesRef.current, name);\r\n                unset(shallowFieldsStateRef.current, name);\r\n                memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\r\n                if (!isUnMount.current) {\r\n                    setFields(mapIds(memoizedDefaultValues.current, keyName));\r\n                }\r\n            };\r\n        }\r\n        return () => {\r\n            isUnMount.current = true;\r\n            shouldUnregister && remove();\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            unset(fieldArrayValuesRef.current, name);\r\n            fieldArrayNames.delete(name);\r\n        };\r\n    }, []);\r\n    return {\r\n        swap: Object(react[\"useCallback\"])(swap, [name]),\r\n        move: Object(react[\"useCallback\"])(move, [name]),\r\n        prepend: Object(react[\"useCallback\"])(prepend$1, [name]),\r\n        append: Object(react[\"useCallback\"])(append, [name]),\r\n        remove: Object(react[\"useCallback\"])(remove, [name]),\r\n        insert: Object(react[\"useCallback\"])(insert$1, [name]),\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (event) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nfunction useController({ name, rules, defaultValue, control, onFocus, }) {\r\n    const methods = useFormContext();\r\n    if (false) {}\r\n    const { defaultValuesRef, setValue, register, unregister, trigger, mode, reValidateMode: { isReValidateOnBlur, isReValidateOnChange }, formState, formStateRef: { current: { isSubmitted, touched, errors }, }, updateFormState, readFormStateRef, fieldsRef, fieldArrayNamesRef, shallowFieldsStateRef, } = control || methods.control;\r\n    const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n    const getInitialValue = () => !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\r\n        ? get(shallowFieldsStateRef.current, name)\r\n        : isUndefined(defaultValue)\r\n            ? get(defaultValuesRef.current, name)\r\n            : defaultValue;\r\n    const [value, setInputStateValue] = Object(react[\"useState\"])(getInitialValue());\r\n    const valueRef = Object(react[\"useRef\"])(value);\r\n    const ref = Object(react[\"useRef\"])({\r\n        focus: () => null,\r\n    });\r\n    const onFocusRef = Object(react[\"useRef\"])(onFocus ||\r\n        (() => {\r\n            if (isFunction(ref.current.focus)) {\r\n                ref.current.focus();\r\n            }\r\n            if (false) {}\r\n        }));\r\n    const shouldValidate = Object(react[\"useCallback\"])((isBlurEvent) => !skipValidation(Object.assign({ isBlurEvent,\r\n        isReValidateOnBlur,\r\n        isReValidateOnChange,\r\n        isSubmitted, isTouched: !!get(touched, name) }, mode)), [\r\n        isReValidateOnBlur,\r\n        isReValidateOnChange,\r\n        isSubmitted,\r\n        touched,\r\n        name,\r\n        mode,\r\n    ]);\r\n    const commonTask = Object(react[\"useCallback\"])(([event]) => {\r\n        const data = getInputValue(event);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    }, []);\r\n    const registerField = Object(react[\"useCallback\"])((shouldUpdateValue) => {\r\n        if (false) {}\r\n        if (fieldsRef.current[name]) {\r\n            fieldsRef.current[name] = Object.assign({ ref: fieldsRef.current[name].ref }, rules);\r\n        }\r\n        else {\r\n            register(Object.defineProperties({\r\n                name,\r\n                focus: onFocusRef.current,\r\n            }, {\r\n                value: {\r\n                    set(data) {\r\n                        setInputStateValue(data);\r\n                        valueRef.current = data;\r\n                    },\r\n                    get() {\r\n                        return valueRef.current;\r\n                    },\r\n                },\r\n            }), rules);\r\n            shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\r\n        }\r\n        shouldUpdateValue &&\r\n            isNotFieldArray &&\r\n            setInputStateValue(getInitialValue());\r\n    }, [rules, name, register]);\r\n    Object(react[\"useEffect\"])(() => () => unregister(name), [name]);\r\n    Object(react[\"useEffect\"])(() => {\r\n        if (false) {}\r\n        registerField();\r\n    }, [registerField]);\r\n    Object(react[\"useEffect\"])(() => {\r\n        !fieldsRef.current[name] && registerField(true);\r\n    });\r\n    const onBlur = Object(react[\"useCallback\"])(() => {\r\n        if (readFormStateRef.current.touched && !get(touched, name)) {\r\n            set(touched, name, true);\r\n            updateFormState({\r\n                touched,\r\n            });\r\n        }\r\n        shouldValidate(true) && trigger(name);\r\n    }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\r\n    const onChange = Object(react[\"useCallback\"])((...event) => setValue(name, commonTask(event), {\r\n        shouldValidate: shouldValidate(),\r\n        shouldDirty: true,\r\n    }), [setValue, name, shouldValidate]);\r\n    return {\r\n        field: {\r\n            onChange,\r\n            onBlur,\r\n            name,\r\n            value,\r\n            ref,\r\n        },\r\n        meta: Object.defineProperties({\r\n            invalid: !!get(errors, name),\r\n        }, {\r\n            isDirty: {\r\n                get() {\r\n                    return !!get(formState.dirtyFields, name);\r\n                },\r\n            },\r\n            isTouched: {\r\n                get() {\r\n                    return !!get(formState.touched, name);\r\n                },\r\n            },\r\n        }),\r\n    };\r\n}\n\nfunction useWatch({ control, name, defaultValue, }) {\r\n    const methods = useFormContext();\r\n    if (false) {}\r\n    const { useWatchFieldsRef, useWatchRenderFunctionsRef, watchInternal, defaultValuesRef, } = control || methods.control;\r\n    const updateValue = Object(react[\"useState\"])()[1];\r\n    const idRef = Object(react[\"useRef\"])();\r\n    const defaultValueRef = Object(react[\"useRef\"])(defaultValue);\r\n    Object(react[\"useEffect\"])(() => {\r\n        if (false) {}\r\n        const id = (idRef.current = generateId());\r\n        const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\r\n        const watchFieldsHook = useWatchFieldsRef.current;\r\n        watchFieldsHook[id] = new Set();\r\n        watchFieldsHookRender[id] = () => updateValue({});\r\n        watchInternal(name, defaultValueRef.current, id);\r\n        return () => {\r\n            delete watchFieldsHook[id];\r\n            delete watchFieldsHookRender[id];\r\n        };\r\n    }, [\r\n        name,\r\n        useWatchRenderFunctionsRef,\r\n        useWatchFieldsRef,\r\n        watchInternal,\r\n        defaultValueRef,\r\n    ]);\r\n    return idRef.current\r\n        ? watchInternal(name, defaultValueRef.current, idRef.current)\r\n        : isUndefined(defaultValue)\r\n            ? isString(name)\r\n                ? get(defaultValuesRef.current, name)\r\n                : Array.isArray(name)\r\n                    ? name.reduce((previous, inputName) => (Object.assign(Object.assign({}, previous), { [inputName]: get(defaultValuesRef.current, inputName) })), {})\r\n                    : defaultValuesRef.current\r\n            : defaultValue;\r\n}\n\nconst Controller = (props) => {\r\n    const { rules, as, render, defaultValue, control, onFocus } = props, rest = __rest(props, [\"rules\", \"as\", \"render\", \"defaultValue\", \"control\", \"onFocus\"]);\r\n    const { field, meta } = useController(props);\r\n    const componentProps = Object.assign(Object.assign({}, rest), field);\r\n    return as\r\n        ? Object(react[\"isValidElement\"])(as)\r\n            ? Object(react[\"cloneElement\"])(as, componentProps)\r\n            : Object(react[\"createElement\"])(as, componentProps)\r\n        : render\r\n            ? render(field, meta)\r\n            : null;\r\n};\n\n\n//# sourceMappingURL=index.esm.js.map\n\n// EXTERNAL MODULE: ./compoenets/layout/index.js\nvar layout = __webpack_require__(\"X5r+\");\n\n// CONCATENATED MODULE: ./pages/register.js\n\nvar __jsx = react_default.a.createElement;\n\n\n\n\n\nvar register_Register = function Register() {\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit;\n\n  return __jsx(layout[\"a\" /* default */], null, __jsx(\"div\", {\n    className: \"flex flex-col h-full w-full justify-content space-x-4 m-10 p-10  \"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(function (data) {\n      alert(JSON.stringify(data));\n    })\n  }, __jsx(\"div\", null, __jsx(\"label\", {\n    className: \"text-l mt-4 font-bold text-logodark block text-right\"\n  }, \"\\u0627\\u0644\\u0628\\u0631\\u064A\\u062F \\u0627\\u0644\\u0625\\u0644\\u0643\\u062A\\u0631\\u0648\\u0646\\u064A\"), __jsx(\"input\", {\n    ref: register,\n    type: \"text\",\n    className: \"w-full p-2 mt-4 border border-gray-300 rounded mt-1\",\n    name: \"email\"\n  })), __jsx(\"div\", null, __jsx(\"label\", {\n    className: \"text-l mt-4 font-bold text-logodark block text-right\"\n  }, \"\\u0643\\u0644\\u0645\\u0629 \\u0627\\u0644\\u0645\\u0631\\u0648\\u0631\"), __jsx(\"input\", {\n    ref: register,\n    type: \"password\",\n    className: \"w-full p-2 mt-4 border border-gray-300 rounded mt-1\",\n    name: \"password\"\n  })), __jsx(\"div\", null, __jsx(\"label\", {\n    className: \"text-l mt-4 font-bold text-logodark block text-right\"\n  }, \"\\u0625\\u0639\\u0627\\u062F\\u0629 \\u0643\\u0644\\u0645\\u0629 \\u0627\\u0644\\u0645\\u0631\\u0648\\u0631\"), __jsx(\"input\", {\n    ref: register,\n    type: \"password\",\n    className: \"w-full p-2 mt-4 border border-gray-300 rounded mt-1\",\n    name: \"repassword\"\n  })), __jsx(\"div\", null, __jsx(\"button\", {\n    type: \"Submit\",\n    className: \"text-l font-bold text-white mt-4 text-center button w-full py-2 px-4 bg-logodark hover:bg-black rounded-xl\"\n  }, \"\\u062A\\u0633\\u062C\\u064A\\u0644\")))));\n};\n\n/* harmony default export */ var pages_register = __webpack_exports__[\"default\"] = (register_Register);\n\n/***/ }),\n\n/***/ \"X5r+\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"q1tI\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;\n\nvar Layout = function Layout(_ref) {\n  var children = _ref.children;\n  return __jsx(\"div\", {\n    className: \"font-body flex flex-row-reverse h-screen   p-4 bg-logodark\"\n  }, __jsx(\"title\", null, \"\\u0644\\u0648\\u062D\\u0629 \\u0627\\u0644\\u062A\\u062D\\u0643\\u0645\"), __jsx(\"ul\", {\n    className: \"bg-lightest absolute w-44 font-bold p-2 mb-2 rounded-xl\"\n  }, __jsx(\"a\", {\n    href: \"/login\"\n  }, __jsx(Row, {\n    icon: \"login\"\n  }, \"\\u062F\\u062E\\u0648\\u0644\"))), __jsx(\"div\", {\n    className: \"flex items-center\"\n  }, __jsx(\"aside\", {\n    className: \"bg-lightest flex-row items-center font-bold hover:rounded-xl rounded-xl \"\n  }, __jsx(\"nav\", null, __jsx(\"ul\", null, __jsx(\"div\", {\n    className: \"grid grid-cols-1 col-center-1 divide-y divide-Gray\"\n  }, __jsx(\"a\", {\n    href: \"/register\"\n  }, \"     \", __jsx(Row, {\n    icon: \"home\"\n  }, \" \\u0627\\u0644\\u0631\\u0626\\u064A\\u0633\\u064A\\u0629\"), \"           \"), __jsx(\"a\", {\n    href: \"/Process\"\n  }, \"      \", __jsx(Row, {\n    icon: \"process\"\n  }, \"\\u0627\\u0644\\u0639\\u0645\\u0644\\u064A\\u0627\\u062A\"), \"        \"), __jsx(\"a\", {\n    href: \"/SalesEmployee\"\n  }, __jsx(Row, {\n    icon: \"salesemp\"\n  }, \"\\u0645\\u0648\\u0638\\u0641\\u064A\\u0646 \\u0627\\u0644\\u0645\\u0628\\u064A\\u0639\\u0627\\u062A\")), __jsx(\"a\", {\n    href: \"/Reports\"\n  }, \"      \", __jsx(Row, {\n    icon: \"reports\"\n  }, \"\\u0627\\u0644\\u062A\\u0642\\u0627\\u0631\\u064A\\u0631\"), \"        \"), __jsx(\"a\", {\n    href: \"/Clients\"\n  }, \"      \", __jsx(Row, {\n    icon: \"clients\"\n  }, \"\\u0627\\u0644\\u0639\\u0645\\u0644\\u0627\\u0621\"), \"          \"), __jsx(\"a\", {\n    href: \"/Requests\"\n  }, \"     \", __jsx(Row, {\n    icon: \"requests\"\n  }, \"\\u0627\\u0644\\u0637\\u0644\\u0628\\u0627\\u062A\"), \"        \"), __jsx(\"a\", {\n    href: \"/FieldOffers\"\n  }, \"  \", __jsx(Row, {\n    icon: \"fieldoff\"\n  }, \"\\u0639\\u0631\\u0648\\u0636 \\u0627\\u0644\\u0645\\u064A\\u062F\\u0627\\u0646\"), \"   \")))))), __jsx(\"div\", {\n    className: \"flex flex-grow h-10/12 bg-lightest  mr-6 p-6 rounded-2xl \"\n  }, children));\n};\n\nvar Row = function Row(props) {\n  return __jsx(\"li\", {\n    className: \"flex text-xl p-6 space-x-3  items-center justify-end hover:bg-gray-200\"\n  }, __jsx(\"span\", null, props.children), icons[props.icon]);\n};\n\nvar icons = {\n  home: __jsx(\"svg\", {\n    className: \"svg-icon\",\n    viewBox: \"0 0 30 20\"\n  }, __jsx(\"path\", {\n    d: \"M18.121,9.88l-7.832-7.836c-0.155-0.158-0.428-0.155-0.584,0L1.842,9.913c-0.262,0.263-0.073,0.705,0.292,0.705h2.069v7.042c0,0.227,0.187,0.414,0.414,0.414h3.725c0.228,0,0.414-0.188,0.414-0.414v-3.313h2.483v3.313c0,0.227,0.187,0.414,0.413,0.414h3.726c0.229,0,0.414-0.188,0.414-0.414v-7.042h2.068h0.004C18.331,10.617,18.389,10.146,18.121,9.88 M14.963,17.245h-2.896v-3.313c0-0.229-0.186-0.415-0.414-0.415H8.342c-0.228,0-0.414,0.187-0.414,0.415v3.313H5.032v-6.628h9.931V17.245z M3.133,9.79l6.864-6.868l6.867,6.868H3.133z\"\n  })),\n  process: __jsx(\"svg\", {\n    className: \"svg-icon\",\n    viewBox: \"0 0 30 20\"\n  }, __jsx(\"path\", {\n    d: \"M14.68,12.621c-0.9,0-1.702,0.43-2.216,1.09l-4.549-2.637c0.284-0.691,0.284-1.457,0-2.146l4.549-2.638c0.514,0.661,1.315,1.09,2.216,1.09c1.549,0,2.809-1.26,2.809-2.808c0-1.548-1.26-2.809-2.809-2.809c-1.548,0-2.808,1.26-2.808,2.809c0,0.38,0.076,0.741,0.214,1.073l-4.55,2.638c-0.515-0.661-1.316-1.09-2.217-1.09c-1.548,0-2.808,1.26-2.808,2.809s1.26,2.808,2.808,2.808c0.9,0,1.702-0.43,2.217-1.09l4.55,2.637c-0.138,0.332-0.214,0.693-0.214,1.074c0,1.549,1.26,2.809,2.808,2.809c1.549,0,2.809-1.26,2.809-2.809S16.229,12.621,14.68,12.621M14.68,2.512c1.136,0,2.06,0.923,2.06,2.06S15.815,6.63,14.68,6.63s-2.059-0.923-2.059-2.059S13.544,2.512,14.68,2.512M5.319,12.061c-1.136,0-2.06-0.924-2.06-2.06s0.923-2.059,2.06-2.059c1.135,0,2.06,0.923,2.06,2.059S6.454,12.061,5.319,12.061M14.68,17.488c-1.136,0-2.059-0.922-2.059-2.059s0.923-2.061,2.059-2.061s2.06,0.924,2.06,2.061S15.815,17.488,14.68,17.488\"\n  })),\n  salesemp: __jsx(\"svg\", {\n    className: \"svg-icon\",\n    viewBox: \"0 0 30 20\"\n  }, __jsx(\"path\", {\n    d: \"M15.573,11.624c0.568-0.478,0.947-1.219,0.947-2.019c0-1.37-1.108-2.569-2.371-2.569s-2.371,1.2-2.371,2.569c0,0.8,0.379,1.542,0.946,2.019c-0.253,0.089-0.496,0.2-0.728,0.332c-0.743-0.898-1.745-1.573-2.891-1.911c0.877-0.61,1.486-1.666,1.486-2.812c0-1.79-1.479-3.359-3.162-3.359S4.269,5.443,4.269,7.233c0,1.146,0.608,2.202,1.486,2.812c-2.454,0.725-4.252,2.998-4.252,5.685c0,0.218,0.178,0.396,0.395,0.396h16.203c0.218,0,0.396-0.178,0.396-0.396C18.497,13.831,17.273,12.216,15.573,11.624 M12.568,9.605c0-0.822,0.689-1.779,1.581-1.779s1.58,0.957,1.58,1.779s-0.688,1.779-1.58,1.779S12.568,10.427,12.568,9.605 M5.06,7.233c0-1.213,1.014-2.569,2.371-2.569c1.358,0,2.371,1.355,2.371,2.569S8.789,9.802,7.431,9.802C6.073,9.802,5.06,8.447,5.06,7.233 M2.309,15.335c0.202-2.649,2.423-4.742,5.122-4.742s4.921,2.093,5.122,4.742H2.309z M13.346,15.335c-0.067-0.997-0.382-1.928-0.882-2.732c0.502-0.271,1.075-0.429,1.686-0.429c1.828,0,3.338,1.385,3.535,3.161H13.346z\"\n  })),\n  reports: __jsx(\"svg\", {\n    className: \"svg-icon\",\n    viewBox: \"0 0 30 20\"\n  }, __jsx(\"path\", {\n    d: \"M15.396,2.292H4.604c-0.212,0-0.385,0.174-0.385,0.386v14.646c0,0.212,0.173,0.385,0.385,0.385h10.792c0.211,0,0.385-0.173,0.385-0.385V2.677C15.781,2.465,15.607,2.292,15.396,2.292 M15.01,16.938H4.99v-2.698h1.609c0.156,0.449,0.586,0.771,1.089,0.771c0.638,0,1.156-0.519,1.156-1.156s-0.519-1.156-1.156-1.156c-0.503,0-0.933,0.321-1.089,0.771H4.99v-3.083h1.609c0.156,0.449,0.586,0.771,1.089,0.771c0.638,0,1.156-0.518,1.156-1.156c0-0.638-0.519-1.156-1.156-1.156c-0.503,0-0.933,0.322-1.089,0.771H4.99V6.531h1.609C6.755,6.98,7.185,7.302,7.688,7.302c0.638,0,1.156-0.519,1.156-1.156c0-0.638-0.519-1.156-1.156-1.156c-0.503,0-0.933,0.322-1.089,0.771H4.99V3.062h10.02V16.938z M7.302,13.854c0-0.212,0.173-0.386,0.385-0.386s0.385,0.174,0.385,0.386s-0.173,0.385-0.385,0.385S7.302,14.066,7.302,13.854 M7.302,10c0-0.212,0.173-0.385,0.385-0.385S8.073,9.788,8.073,10s-0.173,0.385-0.385,0.385S7.302,10.212,7.302,10 M7.302,6.146c0-0.212,0.173-0.386,0.385-0.386s0.385,0.174,0.385,0.386S7.899,6.531,7.688,6.531S7.302,6.358,7.302,6.146\"\n  })),\n  clients: __jsx(\"svg\", {\n    className: \"svg-icon\",\n    viewBox: \"0 0 30 20\"\n  }, __jsx(\"path\", {\n    d: \"M12.075,10.812c1.358-0.853,2.242-2.507,2.242-4.037c0-2.181-1.795-4.618-4.198-4.618S5.921,4.594,5.921,6.775c0,1.53,0.884,3.185,2.242,4.037c-3.222,0.865-5.6,3.807-5.6,7.298c0,0.23,0.189,0.42,0.42,0.42h14.273c0.23,0,0.42-0.189,0.42-0.42C17.676,14.619,15.297,11.677,12.075,10.812 M6.761,6.775c0-2.162,1.773-3.778,3.358-3.778s3.359,1.616,3.359,3.778c0,2.162-1.774,3.778-3.359,3.778S6.761,8.937,6.761,6.775 M3.415,17.69c0.218-3.51,3.142-6.297,6.704-6.297c3.562,0,6.486,2.787,6.705,6.297H3.415z\"\n  })),\n  requests: __jsx(\"svg\", {\n    className: \"svg-icon\",\n    viewBox: \"0 0 30 20\"\n  }, __jsx(\"path\", {\n    d: \"M17.218,2.268L2.477,8.388C2.13,8.535,2.164,9.05,2.542,9.134L9.33,10.67l1.535,6.787c0.083,0.377,0.602,0.415,0.745,0.065l6.123-14.74C17.866,2.46,17.539,2.134,17.218,2.268 M3.92,8.641l11.772-4.89L9.535,9.909L3.92,8.641z M11.358,16.078l-1.268-5.613l6.157-6.157L11.358,16.078z\"\n  })),\n  fieldoff: __jsx(\"svg\", {\n    className: \"svg-icon\",\n    viewBox: \"0 0 30 20\"\n  }, __jsx(\"path\", {\n    d: \"M10,1.375c-3.17,0-5.75,2.548-5.75,5.682c0,6.685,5.259,11.276,5.483,11.469c0.152,0.132,0.382,0.132,0.534,0c0.224-0.193,5.481-4.784,5.483-11.469C15.75,3.923,13.171,1.375,10,1.375 M10,17.653c-1.064-1.024-4.929-5.127-4.929-10.596c0-2.68,2.212-4.861,4.929-4.861s4.929,2.181,4.929,4.861C14.927,12.518,11.063,16.627,10,17.653 M10,3.839c-1.815,0-3.286,1.47-3.286,3.286s1.47,3.286,3.286,3.286s3.286-1.47,3.286-3.286S11.815,3.839,10,3.839 M10,9.589c-1.359,0-2.464-1.105-2.464-2.464S8.641,4.661,10,4.661s2.464,1.105,2.464,2.464S11.359,9.589,10,9.589\"\n  })),\n  login: __jsx(\"svg\", {\n    className: \"svg-icon\",\n    viewBox: \"0 0 20 20\"\n  }, __jsx(\"path\", {\n    d: \"M17.308,7.564h-1.993c0-2.929-2.385-5.314-5.314-5.314S4.686,4.635,4.686,7.564H2.693c-0.244,0-0.443,0.2-0.443,0.443v9.3c0,0.243,0.199,0.442,0.443,0.442h14.615c0.243,0,0.442-0.199,0.442-0.442v-9.3C17.75,7.764,17.551,7.564,17.308,7.564 M10,3.136c2.442,0,4.43,1.986,4.43,4.428H5.571C5.571,5.122,7.558,3.136,10,3.136 M16.865,16.864H3.136V8.45h13.729V16.864z M10,10.664c-0.854,0-1.55,0.696-1.55,1.551c0,0.699,0.467,1.292,1.107,1.485v0.95c0,0.243,0.2,0.442,0.443,0.442s0.443-0.199,0.443-0.442V13.7c0.64-0.193,1.106-0.786,1.106-1.485C11.55,11.36,10.854,10.664,10,10.664 M10,12.878c-0.366,0-0.664-0.298-0.664-0.663c0-0.366,0.298-0.665,0.664-0.665c0.365,0,0.664,0.299,0.664,0.665C10.664,12.58,10.365,12.878,10,12.878\"\n  }))\n};\n/* harmony default export */ __webpack_exports__[\"a\"] = (Layout);\n\n/***/ }),\n\n/***/ \"c05+\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/register\",\n        function () {\n          return __webpack_require__(\"Dsvi\");\n        }\n      ]);\n    \n\n/***/ })\n\n},[[\"c05+\",0,1,2]]]);","inputSourceMap":{"version":3,"sources":["/Users/i0h1m/Desktop/najmat-nextjs - - - DON'T/najmat with-mongodb/node_modules/react-hook-form/dist/index.esm.js","/Users/i0h1m/Desktop/najmat-nextjs - - - DON'T/najmat with-mongodb/node_modules/next/dist/build/webpack/loaders/next-babel-loader.js??ref--4!/Users/i0h1m/Desktop/najmat-nextjs - - - DON'T/najmat with-mongodb/pages/register.js","/Users/i0h1m/Desktop/najmat-nextjs - - - DON'T/najmat with-mongodb/node_modules/next/dist/build/webpack/loaders/next-babel-loader.js??ref--4!/Users/i0h1m/Desktop/najmat-nextjs - - - DON'T/najmat with-mongodb/compoenets/layout/index.js","/Users/i0h1m/Desktop/najmat-nextjs - - - DON'T/najmat with-mongodb/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2Fregister&absolutePagePath=private-next-pages%2Fregister.js!"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAkJ;;AAElJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,MAAM;AACrC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,WAAW;AACzB,WAAW,QAAQ;;AAEnB;;AAEA;;AAEA;;AAEA,wDAAwD,OAAO;;AAE/D;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO,QAAQ,EAAE;AACxC,oBAAoB;AACpB;AACA,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO,kBAAkB,gDAAgD;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oCAAoC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,YAAY,OAAO,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA,gDAAgD,MAAM;AACtD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,+BAAc;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA,iFAAiF;AACjF;AACA;AACA,wDAAwD;AACxD,kDAAkD;AAClD,0EAA0E,wBAAwB,cAAc;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,0DAA0D;AACtF;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,8CAA8C,+BAAc;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,kBAAkB,sCAAsC,+DAA+D,KAAK,0BAA0B,GAAG;;AAE7L,iEAAiE,YAAY,QAAQ,yEAAyE;AAC9J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe;AACf;AACA;AACA,yCAAyC;AACzC,uEAAuE;AACvE,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+BAA+B;AAC9C;AACA,yCAAyC;AACzC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,mBAAmB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,2HAA2H;AAClJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,+DAA+D,WAAW;AAC1E;;AAEA,qDAAqD,OAAO;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA,kBAAkB,kHAAkH,mEAAmE,KAAK;AAC5M,sBAAsB,uBAAM,GAAG;AAC/B,uCAAuC,uBAAM,GAAG;AAChD,gCAAgC,uBAAM,GAAG;AACzC,2BAA2B,uBAAM;AACjC,8BAA8B,uBAAM,GAAG;AACvC,uCAAuC,uBAAM,GAAG;AAChD,oCAAoC,uBAAM,GAAG;AAC7C,2BAA2B,uBAAM,GAAG;AACpC,6BAA6B,uBAAM;AACnC,sBAAsB,uBAAM;AAC5B,0BAA0B,uBAAM;AAChC,4BAA4B,uBAAM;AAClC,kCAAkC,uBAAM,GAAG;AAC3C,uCAAuC,uBAAM,GAAG;AAChD,uBAAuB,uBAAM;AAC7B,wBAAwB,uBAAM;AAC9B,+BAA+B,uBAAM;AACrC,oBAAoB,uBAAM;AAC1B,WAAW,wBAAwB;AACnC;AACA,sCAAsC,yBAAQ;AAC9C;AACA;AACA,uBAAuB;AACvB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,kBAAkB;AAClB,KAAK;AACL,6BAA6B,uBAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,yBAAyB,uBAAM;AAC/B,wBAAwB,uBAAM;AAC9B,WAAW,kEAAkE,GAAG,uBAAM;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4BAAW,YAAY;AACnD;AACA,iEAAiE;AACjE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT,oCAAoC,4BAAW,+CAA+C;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,kCAAkC,qBAAqB,KAAK,KAAK,sBAAsB;AAC/J;AACA,KAAK;AACL,0BAA0B,4BAAW;AACrC,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,wBAAwB,4BAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,mCAAmC,4BAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,8BAA8B,4BAAW;AACzC,YAAY,KAAqC,EAAE,EAK1C;AACT;AACA;AACA;AACA,KAAK;AACL,8CAA8C,4BAAW;AACzD,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,mGAAmG;AACnG;AACA;AACA,KAAK;AACL,oBAAoB,4BAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL,8BAA8B,4BAAW,gBAAgB,8BAA8B;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,6BAA6B,4BAAW;AACxC;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,0EAA0E,iBAAiB,gBAAgB;AAC3G,qBAAqB;AACrB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA,kBAAkB,eAAe;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA,6IAA6I;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,WAAW,wCAAwC;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,UAAU,cAAc;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4BAAW,mBAAmB;AAC3D;AACA;AACA;AACA,eAAe,SAAS,0EAA0E;AAClG;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK;AACL,qCAAqC,4BAAW;AAChD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,+BAA+B,4BAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,2CAA2C,4BAAW;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D,SAAS;AACT;AACA;AACA,kDAAkD;AAClD,6EAA6E,WAAW,MAAM;AAC9F;AACA;AACA,SAAS;AACT;AACA;AACA,0BAA0B,4BAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,cAAc,mFAAmF,MAAM;AAC/L;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C,YAAY,KAAqC,EAAE,EAU1C;AACT,eAAe,oBAAoB;AACnC,4DAA4D,MAAM;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,yBAAyB;AACzB,6BAA6B,aAAa,EAAE,6BAA6B;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,6BAA6B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4BAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,iBAAiB;AACjB;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL,wBAAwB,4EAA4E;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E,gEAAgE;AAChE,6DAA6D;AAC7D;AACA;AACA,SAAS;AACT;AACA,8CAA8C;AAC9C;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,0BAAS;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,0BAAS;AACb;AACA;AACA,YAAY,KAAqC,EAAE,EAE1C;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,4BAAW;AAC7B,mBAAmB,4BAAW;AAC9B,kBAAkB,4BAAW;AAC7B,oBAAoB,4BAAW;AAC/B;AACA;AACA;AACA,wBAAwB,KAAqC,EAAE,EAI1C;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,oBAAoB,wBAAO,uBAAuB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,6BAA6B,4BAAW,0BAA0B,4BAAW,6BAA6B,4BAAW,0CAA0C;AAC/J;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4DAA4D,cAAc;AAC1E;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,8BAAa;AACjC;AACA,6BAA6B,2BAAU;AACvC;AACA,SAAS,WAAW;AACpB,YAAY,8BAAa,wBAAwB,wBAAwB,UAAU;AACnF;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,QAAQ,KAAqC,EAAE,EAe1C;AACL,iDAAiD,4CAA4C;AAC7F;AACA,wBAAwB,iCAAiC;AACzD;AACA,QAAQ,KAAqC,EAAE,EAI1C;AACL,0BAA0B,uBAAM;AAChC,sBAAsB,uBAAM;AAC5B,WAAW,2VAA2V;AACtW;AACA;AACA,kCAAkC,uBAAM;AACxC;AACA;AACA;AACA;AACA,gCAAgC,yBAAQ;AACxC;AACA,mDAAmD;AACnD;AACA;AACA,KAAK;AACL;AACA,+BAA+B,4BAAW;AAC1C,iJAAiJ;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,IAAI,0BAAS;AACb,YAAY,KAAqC,EAAE,EAI1C;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,KAAK,GAAG,sBAAsB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,0BAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,cAAc,4BAAW;AACzB,cAAc,4BAAW;AACzB,iBAAiB,4BAAW;AAC5B,gBAAgB,4BAAW;AAC3B,gBAAgB,4BAAW;AAC3B,gBAAgB,4BAAW;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,+CAA+C;AACvE;AACA,QAAQ,KAAqC,EAAE,EAI1C;AACL,WAAW,mFAAmF,2CAA2C,4BAA4B,WAAW,+BAA+B,GAAG,4FAA4F;AAC9S;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,yBAAQ;AAChD,qBAAqB,uBAAM;AAC3B,gBAAgB,uBAAM;AACtB;AACA,KAAK;AACL,uBAAuB,uBAAM;AAC7B;AACA;AACA;AACA;AACA,gBAAgB,KAAqC,EAAE,EAI1C;AACb,SAAS;AACT,2BAA2B,4BAAW,iDAAiD;AACvF;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4BAAW;AAClC;AACA;AACA;AACA;AACA,KAAK;AACL,0BAA0B,4BAAW;AACrC,YAAY,KAAqC,EAAE,EAI1C;AACT;AACA,qDAAqD,mCAAmC;AACxF;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,0BAAS;AACb,IAAI,0BAAS;AACb,YAAY,KAAqC,EAAE,EAO1C;AACT;AACA,KAAK;AACL,IAAI,0BAAS;AACb;AACA,KAAK;AACL,mBAAmB,4BAAW;AAC9B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL,qBAAqB,4BAAW;AAChC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;;AAEA,mBAAmB,+BAA+B;AAClD;AACA,QAAQ,KAAqC,EAAE,EAI1C;AACL,WAAW,kFAAkF;AAC7F,wBAAwB,yBAAQ;AAChC,kBAAkB,uBAAM;AACxB,4BAA4B,uBAAM;AAClC,IAAI,0BAAS;AACb,YAAY,KAAqC,EAAE,EAI1C;AACT;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,cAAc,wDAAwD,MAAM;AACtK;AACA;AACA;;AAEA;AACA,WAAW,oDAAoD;AAC/D,WAAW,cAAc;AACzB,yDAAyD;AACzD;AACA,UAAU,+BAAc;AACxB,cAAc,6BAAY;AAC1B,cAAc,8BAAa;AAC3B;AACA;AACA;AACA;;AAE+I;AAC/I;;;;;;ACn4D0B;AAC1B,YAAY,eAAK;AACc;AACW;AACF;AACE;;AAE1C,IAAI,iBAAQ;AACZ,iBAAiB,OAAO;AACxB;AACA;;AAEA,eAAe,yBAAM;AACrB;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;;AAEe,qGAAQ,E;;;;;;;;AC7CvB;AAAA;AAA0B;AAC1B,YAAY,4CAAK;;AAEjB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACe,+DAAM,E;;;;;;;;AC3GrB;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,MAAgC;AACzD;AACA","file":"x","sourcesContent":["import { isValidElement, useRef, useState, useCallback, useEffect, useMemo, createContext, useContext, createElement, cloneElement } from 'react';\n\nvar isHTMLElement = (value) => value instanceof HTMLElement;\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst SELECT = 'select';\r\nconst UNDEFINED = 'undefined';\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nfunction attachEventListeners({ ref }, shouldAttachChangeEvent, handleChange) {\r\n    if (isHTMLElement(ref) && handleChange) {\r\n        ref.addEventListener(shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !(value instanceof Date);\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar compact = (value) => value.filter(Boolean);\n\nvar stringToPath = (input) => compact(input\r\n    .replace(/[\"|']/g, '')\r\n    .replace(/\\[/g, '.')\r\n    .replace(/\\]/g, '')\r\n    .split('.'));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data, value = {}) => {\r\n    for (const key in data) {\r\n        !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\r\n    }\r\n    return value;\r\n};\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj = {}, path, defaultValue) => {\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nvar focusOnErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus && isUndefined(field.ref.focus())) {\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.ref.checked\r\n        ? {\r\n            isValid: true,\r\n            value: option.ref.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isMultipleSelect = (element) => element.type === `${SELECT}-multiple`;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.ref.checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || value === ''\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fieldsRef, name, shallowFieldsStateRef, excludeDisabled, shouldKeepRawValue) {\r\n    const field = fieldsRef.current[name];\r\n    if (field) {\r\n        const { ref: { value, disabled }, ref, valueAsNumber, valueAsDate, setValueAs, } = field;\r\n        if (disabled && excludeDisabled) {\r\n            return;\r\n        }\r\n        if (isFileInput(ref)) {\r\n            return ref.files;\r\n        }\r\n        if (isRadioInput(ref)) {\r\n            return getRadioValue(field.options).value;\r\n        }\r\n        if (isMultipleSelect(ref)) {\r\n            return getMultipleSelectValue(ref.options);\r\n        }\r\n        if (isCheckBoxInput(ref)) {\r\n            return getCheckboxValue(field.options).value;\r\n        }\r\n        return shouldKeepRawValue\r\n            ? value\r\n            : valueAsNumber\r\n                ? value === ''\r\n                    ? NaN\r\n                    : +value\r\n                : valueAsDate\r\n                    ? ref.valueAsDate\r\n                    : setValueAs\r\n                        ? setValueAs(value)\r\n                        : value;\r\n    }\r\n    if (shallowFieldsStateRef) {\r\n        return get(shallowFieldsStateRef.current, name);\r\n    }\r\n}\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) &&\r\n                        !objectRef.filter((data) => (isObject(data) && !isEmptyObject(data)) || isBoolean(data)).length))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nconst isSameRef = (fieldValue, ref) => fieldValue && fieldValue.ref === ref;\r\nfunction findRemovedFieldAndRemoveListener(fieldsRef, handleChange, field, shallowFieldsStateRef, shouldUnregister, forceDelete) {\r\n    const { ref, ref: { name }, } = field;\r\n    const fieldRef = fieldsRef.current[name];\r\n    if (!shouldUnregister) {\r\n        const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\r\n        !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\r\n    }\r\n    if (!ref.type || !fieldRef) {\r\n        delete fieldsRef.current[name];\r\n        return;\r\n    }\r\n    if (isRadioInput(ref) || isCheckBoxInput(ref)) {\r\n        if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\r\n            compact(fieldRef.options).forEach((option = {}, index) => {\r\n                if ((isDetached(option.ref) && isSameRef(option, option.ref)) ||\r\n                    forceDelete) {\r\n                    removeAllEventListeners(option.ref, handleChange);\r\n                    unset(fieldRef.options, `[${index}]`);\r\n                }\r\n            });\r\n            if (fieldRef.options && !compact(fieldRef.options).length) {\r\n                delete fieldsRef.current[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fieldsRef.current[name];\r\n        }\r\n    }\r\n    else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        delete fieldsRef.current[name];\r\n    }\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepMerge(target, source) {\r\n    if (isPrimitive(target) || isPrimitive(source)) {\r\n        return source;\r\n    }\r\n    for (const key in source) {\r\n        const targetValue = target[key];\r\n        const sourceValue = source[key];\r\n        try {\r\n            target[key] =\r\n                (isObject(targetValue) && isObject(sourceValue)) ||\r\n                    (Array.isArray(targetValue) && Array.isArray(sourceValue))\r\n                    ? deepMerge(targetValue, sourceValue)\r\n                    : sourceValue;\r\n        }\r\n        catch (_a) { }\r\n    }\r\n    return target;\r\n}\n\nfunction deepEqual(object1, object2, isErrorObject) {\r\n    if (isPrimitive(object1) ||\r\n        isPrimitive(object2) ||\r\n        object1 instanceof Date ||\r\n        object2 instanceof Date) {\r\n        return object1 === object2;\r\n    }\r\n    if (!isValidElement(object1)) {\r\n        const keys1 = Object.keys(object1);\r\n        const keys2 = Object.keys(object2);\r\n        if (keys1.length !== keys2.length) {\r\n            return false;\r\n        }\r\n        for (const key of keys1) {\r\n            const val1 = object1[key];\r\n            if (!(isErrorObject && key === 'ref')) {\r\n                const val2 = object2[key];\r\n                if ((isObject(val1) || Array.isArray(val1)) &&\r\n                    (isObject(val2) || Array.isArray(val2))\r\n                    ? !deepEqual(val1, val2, isErrorObject)\r\n                    : val1 !== val2) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\r\n    let index = -1;\r\n    while (++index < values.length) {\r\n        for (const key in values[index]) {\r\n            if (Array.isArray(values[index][key])) {\r\n                !dirtyFields[index] && (dirtyFields[index] = {});\r\n                dirtyFields[index][key] = [];\r\n                setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\r\n            }\r\n            else {\r\n                deepEqual(get(defaultValues[index] || {}, key), values[index][key])\r\n                    ? set(dirtyFields[index] || {}, key)\r\n                    : (dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), { [key]: true }));\r\n            }\r\n        }\r\n        parentNode &&\r\n            !dirtyFields.length &&\r\n            delete parentNode[parentName];\r\n    }\r\n    return dirtyFields;\r\n}\r\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fieldsRef, shallowFieldsState, shouldUnregister, excludeDisabled, search) => {\r\n    const output = {};\r\n    for (const name in fieldsRef.current) {\r\n        if (isUndefined(search) ||\r\n            (isString(search)\r\n                ? name.startsWith(search)\r\n                : Array.isArray(search) && search.find((data) => name.startsWith(data)))) {\r\n            output[name] = getFieldValue(fieldsRef, name, undefined, excludeDisabled);\r\n        }\r\n    }\r\n    return shouldUnregister\r\n        ? transformToNestObject(output)\r\n        : deepMerge(shallowFieldsState, transformToNestObject(output));\r\n};\n\nvar isErrorStateChanged = ({ errors, name, error, validFields, fieldsWithValidation, }) => {\r\n    const isValid = isUndefined(error);\r\n    const previousError = get(errors, name);\r\n    return ((isValid && !!previousError) ||\r\n        (!isValid && !deepEqual(previousError, error, true)) ||\r\n        (isValid && get(fieldsWithValidation, name) && !get(validFields, name)));\r\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isMessage = (value) => isString(value) || isValidElement(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) || (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? Object.assign(Object.assign({}, errors[name]), { types: Object.assign(Object.assign({}, (errors[name] && errors[name].types ? errors[name].types : {})), { [type]: message || true }) }) : {};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { value }, options, required, maxLength, minLength, min, max, pattern, validate, }, shallowFieldsStateRef) => {\r\n    const name = ref.name;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = value === '';\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message, ref: isRadioOrCheckbox\r\n                    ? ((fieldsRef.current[name].options || [])[0] || {}).ref\r\n                    : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNaN(value)) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            value.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            value.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && pattern && !isEmpty) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message,\r\n                ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef, false, true);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const [key, validateFunction] of Object.entries(validate)) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateResult = await validateFunction(fieldValue);\r\n                const validateError = getValidateError(validateResult, validateRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst getPath = (rootPath, values, paths = []) => {\r\n    for (const property in values) {\r\n        const rootName = (rootPath +\r\n            (isObject(values)\r\n                ? `.${property}`\r\n                : `[${property}]`));\r\n        isPrimitive(values[property])\r\n            ? paths.push(rootName)\r\n            : getPath(rootName, values[property], paths);\r\n    }\r\n    return paths;\r\n};\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, inputValue, isSingleField) => {\r\n    let value = undefined;\r\n    watchFields.add(fieldName);\r\n    if (!isEmptyObject(fieldValues)) {\r\n        value = get(fieldValues, fieldName);\r\n        if (isObject(value) || Array.isArray(value)) {\r\n            getPath(fieldName, value).forEach((name) => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isSingleField\r\n            ? inputValue\r\n            : get(inputValue, fieldName)\r\n        : value;\r\n};\n\nvar skipValidation = ({ isOnBlur, isOnChange, isOnTouch, isTouched, isReValidateOnBlur, isReValidateOnChange, isBlurEvent, isSubmitted, isOnAll, }) => {\r\n    if (isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? isReValidateOnChange : isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar getFieldArrayParentName = (name) => name.substring(0, name.indexOf('['));\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\r\nvar isNameInFieldArray = (names, name) => [...names].some((current) => isMatchFieldArrayName(name, current));\n\nvar isSelectInput = (element) => element.type === `${SELECT}-one`;\n\nfunction onDomRemove(fieldsRef, removeFieldEventListenerAndRef) {\r\n    const observer = new MutationObserver(() => {\r\n        for (const field of Object.values(fieldsRef.current)) {\r\n            if (field && field.options) {\r\n                for (const option of field.options) {\r\n                    if (option && option.ref && isDetached(option.ref)) {\r\n                        removeFieldEventListenerAndRef(field);\r\n                    }\r\n                }\r\n            }\r\n            else if (field && isDetached(field.ref)) {\r\n                removeFieldEventListenerAndRef(field);\r\n            }\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nvar isWeb = typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    if (isPrimitive(data) ||\r\n        (isWeb && (data instanceof File || isHTMLElement(data)))) {\r\n        return data;\r\n    }\r\n    if (data instanceof Date) {\r\n        copy = new Date(data.getTime());\r\n        return copy;\r\n    }\r\n    if (data instanceof Set) {\r\n        copy = new Set();\r\n        for (const item of data) {\r\n            copy.add(item);\r\n        }\r\n        return copy;\r\n    }\r\n    if (data instanceof Map) {\r\n        copy = new Map();\r\n        for (const key of data.keys()) {\r\n            copy.set(key, cloneObject(data.get(key)));\r\n        }\r\n        return copy;\r\n    }\r\n    copy = Array.isArray(data) ? [] : {};\r\n    for (const key in data) {\r\n        copy[key] = cloneObject(data[key]);\r\n    }\r\n    return copy;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nvar isRadioOrCheckboxFunction = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nconst isWindowUndefined = typeof window === UNDEFINED;\r\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, resolver, context, defaultValues = {}, shouldFocusError = true, shouldUnregister = true, criteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const fieldArrayDefaultValuesRef = useRef({});\r\n    const fieldArrayValuesRef = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const useWatchFieldsRef = useRef({});\r\n    const useWatchRenderFunctionsRef = useRef({});\r\n    const fieldsWithValidationRef = useRef({});\r\n    const validFieldsRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const shallowFieldsStateRef = useRef({});\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const contextRef = useRef(context);\r\n    const resolverRef = useRef(resolver);\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const modeRef = useRef(modeChecker(mode));\r\n    const { isOnSubmit, isOnTouch } = modeRef.current;\r\n    const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\r\n    const [formState, setFormState] = useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touched: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: !isOnSubmit,\r\n        errors: {},\r\n    });\r\n    const readFormStateRef = useRef({\r\n        isDirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        touched: !isProxyEnabled || isOnTouch,\r\n        isValidating: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const formStateRef = useRef(formState);\r\n    const observerRef = useRef();\r\n    const { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange, } = useRef(modeChecker(reValidateMode)).current;\r\n    contextRef.current = context;\r\n    resolverRef.current = resolver;\r\n    formStateRef.current = formState;\r\n    shallowFieldsStateRef.current = shouldUnregister\r\n        ? {}\r\n        : isEmptyObject(shallowFieldsStateRef.current)\r\n            ? cloneObject(defaultValues)\r\n            : shallowFieldsStateRef.current;\r\n    const updateFormState = useCallback((state = {}) => {\r\n        if (!isUnMount.current) {\r\n            formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), state);\r\n            setFormState(formStateRef.current);\r\n        }\r\n    }, []);\r\n    const updateIsValidating = () => readFormStateRef.current.isValidating &&\r\n        updateFormState({\r\n            isValidating: true,\r\n        });\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender = false, state = {}, isValid) => {\r\n        let shouldReRender = shouldRender ||\r\n            isErrorStateChanged({\r\n                errors: formStateRef.current.errors,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        const previousError = get(formStateRef.current.errors, name);\r\n        if (error) {\r\n            unset(validFieldsRef.current, name);\r\n            shouldReRender =\r\n                shouldReRender ||\r\n                    !previousError ||\r\n                    !deepEqual(previousError, error, true);\r\n            set(formStateRef.current.errors, name, error);\r\n        }\r\n        else {\r\n            if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\r\n                set(validFieldsRef.current, name, true);\r\n                shouldReRender = shouldReRender || previousError;\r\n            }\r\n            unset(formStateRef.current.errors, name);\r\n        }\r\n        if ((shouldReRender && !isNullOrUndefined(shouldRender)) ||\r\n            !isEmptyObject(state) ||\r\n            readFormStateRef.current.isValidating) {\r\n            updateFormState(Object.assign(Object.assign(Object.assign({}, state), (resolverRef.current ? { isValid: !!isValid } : {})), { isValidating: false }));\r\n        }\r\n    }, []);\r\n    const setFieldValue = useCallback((name, rawValue) => {\r\n        const { ref, options } = fieldsRef.current[name];\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref)) {\r\n            (options || []).forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref) && !isString(value)) {\r\n            ref.files = value;\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach((selectRef) => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = Array.isArray(value)\r\n                    ? !!value.find((data) => data === checkboxRef.value)\r\n                    : value === checkboxRef.value))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n    }, []);\r\n    const isFormDirty = useCallback((name, data) => {\r\n        if (readFormStateRef.current.isDirty) {\r\n            const formValues = getValues();\r\n            name && data && set(formValues, name, data);\r\n            return !deepEqual(formValues, defaultValuesRef.current);\r\n        }\r\n        return false;\r\n    }, []);\r\n    const updateAndGetDirtyState = useCallback((name, shouldRender = true) => {\r\n        if (readFormStateRef.current.isDirty ||\r\n            readFormStateRef.current.dirtyFields) {\r\n            const isFieldDirty = !deepEqual(get(defaultValuesRef.current, name), getFieldValue(fieldsRef, name, shallowFieldsStateRef));\r\n            const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\r\n            const previousIsDirty = formStateRef.current.isDirty;\r\n            isFieldDirty\r\n                ? set(formStateRef.current.dirtyFields, name, true)\r\n                : unset(formStateRef.current.dirtyFields, name);\r\n            const state = {\r\n                isDirty: isFormDirty(),\r\n                dirtyFields: formStateRef.current.dirtyFields,\r\n            };\r\n            const isChanged = (readFormStateRef.current.isDirty &&\r\n                previousIsDirty !== state.isDirty) ||\r\n                (readFormStateRef.current.dirtyFields &&\r\n                    isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\r\n            isChanged && shouldRender && updateFormState(state);\r\n            return isChanged ? state : {};\r\n        }\r\n        return {};\r\n    }, []);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!fieldsRef.current[name]) {\r\n                console.warn('📋 Field is missing with `name` attribute: ', name);\r\n                return false;\r\n            }\r\n        }\r\n        const error = (await validateField(fieldsRef, isValidateAllFieldCriteria, fieldsRef.current[name], shallowFieldsStateRef))[name];\r\n        shouldRenderBaseOnError(name, error, skipReRender);\r\n        return isUndefined(error);\r\n    }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\r\n    const executeSchemaOrResolverValidation = useCallback(async (names) => {\r\n        const { errors } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\r\n        const previousFormIsValid = formStateRef.current.isValid;\r\n        if (Array.isArray(names)) {\r\n            const isInputsValid = names\r\n                .map((name) => {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(formStateRef.current.errors, name, error)\r\n                    : unset(formStateRef.current.errors, name);\r\n                return !error;\r\n            })\r\n                .every(Boolean);\r\n            updateFormState({\r\n                isValid: isEmptyObject(errors),\r\n                isValidating: false,\r\n            });\r\n            return isInputsValid;\r\n        }\r\n        else {\r\n            const error = get(errors, names);\r\n            shouldRenderBaseOnError(names, error, previousFormIsValid !== isEmptyObject(errors), {}, isEmptyObject(errors));\r\n            return !error;\r\n        }\r\n    }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\r\n    const trigger = useCallback(async (name) => {\r\n        const fields = name || Object.keys(fieldsRef.current);\r\n        updateIsValidating();\r\n        if (resolverRef.current) {\r\n            return executeSchemaOrResolverValidation(fields);\r\n        }\r\n        if (Array.isArray(fields)) {\r\n            !name && (formStateRef.current.errors = {});\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, null)));\r\n            updateFormState({\r\n                isValidating: false,\r\n            });\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [executeSchemaOrResolverValidation, executeValidation]);\r\n    const setInternalValues = useCallback((name, value, { shouldDirty, shouldValidate }) => {\r\n        const data = {};\r\n        set(data, name, value);\r\n        for (const fieldName of getPath(name, value)) {\r\n            if (fieldsRef.current[fieldName]) {\r\n                setFieldValue(fieldName, get(data, fieldName));\r\n                shouldDirty && updateAndGetDirtyState(fieldName);\r\n                shouldValidate && trigger(fieldName);\r\n            }\r\n        }\r\n    }, [trigger, setFieldValue, updateAndGetDirtyState]);\r\n    const setInternalValue = useCallback((name, value, config) => {\r\n        !shouldUnregister &&\r\n            !isPrimitive(value) &&\r\n            set(shallowFieldsStateRef.current, name, Object.assign({}, value));\r\n        if (fieldsRef.current[name]) {\r\n            setFieldValue(name, value);\r\n            config.shouldDirty && updateAndGetDirtyState(name);\r\n            config.shouldValidate && trigger(name);\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValues(name, value, config);\r\n            if (fieldArrayNamesRef.current.has(name)) {\r\n                const parentName = getFieldArrayParentName(name) || name;\r\n                set(fieldArrayDefaultValuesRef.current, name, value);\r\n                resetFieldArrayFunctionRef.current[parentName]({\r\n                    [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\r\n                });\r\n                if ((readFormStateRef.current.isDirty ||\r\n                    readFormStateRef.current.dirtyFields) &&\r\n                    config.shouldDirty) {\r\n                    set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n                    updateFormState({\r\n                        isDirty: !deepEqual(Object.assign(Object.assign({}, getValues()), { [name]: value }), defaultValuesRef.current),\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\r\n    }, [updateAndGetDirtyState, setFieldValue, setInternalValues]);\r\n    const isFieldWatched = (name) => isWatchAllRef.current ||\r\n        watchFieldsRef.current.has(name) ||\r\n        watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\r\n    const renderWatchedInputs = (name) => {\r\n        let found = true;\r\n        if (!isEmptyObject(useWatchFieldsRef.current)) {\r\n            for (const key in useWatchFieldsRef.current) {\r\n                if (!name ||\r\n                    !useWatchFieldsRef.current[key].size ||\r\n                    useWatchFieldsRef.current[key].has(name) ||\r\n                    useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))) {\r\n                    useWatchRenderFunctionsRef.current[key]();\r\n                    found = false;\r\n                }\r\n            }\r\n        }\r\n        return found;\r\n    };\r\n    function setValue(name, value, config) {\r\n        setInternalValue(name, value, config || {});\r\n        isFieldWatched(name) && updateFormState();\r\n        renderWatchedInputs(name);\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            let name = target.name;\r\n            const field = fieldsRef.current[name];\r\n            let error;\r\n            let isValid;\r\n            if (field) {\r\n                const isBlurEvent = type === EVENTS.BLUR;\r\n                const shouldSkipValidation = skipValidation(Object.assign({ isBlurEvent,\r\n                    isReValidateOnChange,\r\n                    isReValidateOnBlur, isTouched: !!get(formStateRef.current.touched, name), isSubmitted: formStateRef.current.isSubmitted }, modeRef.current));\r\n                let state = updateAndGetDirtyState(name, false);\r\n                let shouldRender = !isEmptyObject(state) ||\r\n                    (!isBlurEvent && isFieldWatched(name));\r\n                if (isBlurEvent &&\r\n                    !get(formStateRef.current.touched, name) &&\r\n                    readFormStateRef.current.touched) {\r\n                    set(formStateRef.current.touched, name, true);\r\n                    state = Object.assign(Object.assign({}, state), { touched: formStateRef.current.touched });\r\n                }\r\n                if (!shouldUnregister && isCheckBoxInput(target)) {\r\n                    set(shallowFieldsStateRef.current, name, getFieldValue(fieldsRef, name));\r\n                }\r\n                if (shouldSkipValidation) {\r\n                    !isBlurEvent && renderWatchedInputs(name);\r\n                    return ((!isEmptyObject(state) ||\r\n                        (shouldRender && isEmptyObject(state))) &&\r\n                        updateFormState(state));\r\n                }\r\n                updateIsValidating();\r\n                if (resolverRef.current) {\r\n                    const { errors } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\r\n                    const previousFormIsValid = formStateRef.current.isValid;\r\n                    error = get(errors, name);\r\n                    if (isCheckBoxInput(target) &&\r\n                        !error &&\r\n                        resolverRef.current) {\r\n                        const parentNodeName = getFieldArrayParentName(name);\r\n                        const currentError = get(errors, parentNodeName, {});\r\n                        currentError.type &&\r\n                            currentError.message &&\r\n                            (error = currentError);\r\n                        if (parentNodeName &&\r\n                            (currentError ||\r\n                                get(formStateRef.current.errors, parentNodeName))) {\r\n                            name = parentNodeName;\r\n                        }\r\n                    }\r\n                    isValid = isEmptyObject(errors);\r\n                    previousFormIsValid !== isValid && (shouldRender = true);\r\n                }\r\n                else {\r\n                    error = (await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef))[name];\r\n                }\r\n                !isBlurEvent && renderWatchedInputs(name);\r\n                shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\r\n            }\r\n        };\r\n    function setFieldArrayDefaultValues(data) {\r\n        if (!shouldUnregister) {\r\n            let copy = cloneObject(data);\r\n            for (const value of fieldArrayNamesRef.current) {\r\n                if (isKey(value) && !copy[value]) {\r\n                    copy = Object.assign(Object.assign({}, copy), { [value]: [] });\r\n                }\r\n            }\r\n            return copy;\r\n        }\r\n        return data;\r\n    }\r\n    function getValues(payload) {\r\n        if (isString(payload)) {\r\n            return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\r\n        }\r\n        if (Array.isArray(payload)) {\r\n            const data = {};\r\n            for (const name of payload) {\r\n                set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\r\n            }\r\n            return data;\r\n        }\r\n        return setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister));\r\n    }\r\n    const validateResolver = useCallback(async (values = {}) => {\r\n        const newDefaultValues = isEmptyObject(fieldsRef.current)\r\n            ? defaultValuesRef.current\r\n            : {};\r\n        const { errors } = (await resolverRef.current(Object.assign(Object.assign(Object.assign({}, newDefaultValues), getValues()), values), contextRef.current, isValidateAllFieldCriteria)) || {};\r\n        const isValid = isEmptyObject(errors);\r\n        formStateRef.current.isValid !== isValid &&\r\n            updateFormState({\r\n                isValid,\r\n            });\r\n    }, [isValidateAllFieldCriteria]);\r\n    const removeFieldEventListener = useCallback((field, forceDelete) => {\r\n        findRemovedFieldAndRemoveListener(fieldsRef, handleChangeRef.current, field, shallowFieldsStateRef, shouldUnregister, forceDelete);\r\n        if (shouldUnregister) {\r\n            unset(validFieldsRef.current, field.ref.name);\r\n            unset(fieldsWithValidationRef.current, field.ref.name);\r\n        }\r\n    }, [shouldUnregister]);\r\n    const updateWatchedValue = useCallback((name) => {\r\n        if (isWatchAllRef.current) {\r\n            updateFormState();\r\n        }\r\n        else {\r\n            for (const watchField of watchFieldsRef.current) {\r\n                if (watchField.startsWith(name)) {\r\n                    updateFormState();\r\n                    break;\r\n                }\r\n            }\r\n            renderWatchedInputs(name);\r\n        }\r\n    }, []);\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (field) {\r\n            removeFieldEventListener(field, forceDelete);\r\n            if (shouldUnregister && !compact(field.options || []).length) {\r\n                unset(formStateRef.current.errors, field.ref.name);\r\n                set(formStateRef.current.dirtyFields, field.ref.name, true);\r\n                updateFormState({\r\n                    isDirty: isFormDirty(),\r\n                });\r\n                readFormStateRef.current.isValid &&\r\n                    resolverRef.current &&\r\n                    validateResolver();\r\n                updateWatchedValue(field.ref.name);\r\n            }\r\n        }\r\n    }, [validateResolver, removeFieldEventListener]);\r\n    function clearErrors(name) {\r\n        name &&\r\n            (Array.isArray(name) ? name : [name]).forEach((inputName) => fieldsRef.current[inputName] && isKey(inputName)\r\n                ? delete formStateRef.current.errors[inputName]\r\n                : unset(formStateRef.current.errors, inputName));\r\n        updateFormState({\r\n            errors: name ? formStateRef.current.errors : {},\r\n        });\r\n    }\r\n    function setError(name, error) {\r\n        const ref = (fieldsRef.current[name] || {}).ref;\r\n        set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), { ref }));\r\n        updateFormState({\r\n            isValid: false,\r\n        });\r\n        error.shouldFocus && ref && ref.focus && ref.focus();\r\n    }\r\n    const watchInternal = useCallback((fieldNames, defaultValue, watchId) => {\r\n        const watchFields = watchId\r\n            ? useWatchFieldsRef.current[watchId]\r\n            : watchFieldsRef.current;\r\n        let fieldValues = getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, false, fieldNames);\r\n        if (isString(fieldNames)) {\r\n            const parentNodeName = getFieldArrayParentName(fieldNames) || fieldNames;\r\n            if (fieldArrayNamesRef.current.has(parentNodeName)) {\r\n                fieldValues = Object.assign(Object.assign({}, fieldArrayValuesRef.current), fieldValues);\r\n            }\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, isUndefined(get(defaultValuesRef.current, fieldNames))\r\n                ? defaultValue\r\n                : get(defaultValuesRef.current, fieldNames), true);\r\n        }\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? defaultValuesRef.current\r\n            : defaultValue;\r\n        if (Array.isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});\r\n        }\r\n        isWatchAllRef.current = isUndefined(watchId);\r\n        return transformToNestObject((!isEmptyObject(fieldValues) && fieldValues) ||\r\n            combinedDefaultValues);\r\n    }, []);\r\n    function watch(fieldNames, defaultValue) {\r\n        return watchInternal(fieldNames, defaultValue);\r\n    }\r\n    function unregister(name) {\r\n        for (const fieldName of Array.isArray(name) ? name : [name]) {\r\n            removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\r\n        }\r\n    }\r\n    function registerFieldRef(ref, options = {}) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!ref.name) {\r\n                return console.warn('📋 Field is missing `name` attribute', ref, `https://react-hook-form.com/api#useForm`);\r\n            }\r\n            if (fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\r\n                !RegExp(`^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\r\n                    .replace(/\\[/g, '\\\\[')\r\n                    .replace(/\\]/g, '\\\\]')).test(ref.name)) {\r\n                return console.warn('📋 `name` prop should be in object shape: name=\"test[index].name\"', ref, 'https://react-hook-form.com/api#useFieldArray');\r\n            }\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldRefAndValidationOptions = Object.assign({ ref }, options);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const compareRef = (currentRef) => isWeb && (!isHTMLElement(ref) || currentRef === ref);\r\n        let field = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let defaultValue;\r\n        if (field &&\r\n            (isRadioOrCheckbox\r\n                ? Array.isArray(field.options) &&\r\n                    compact(field.options).find((option) => {\r\n                        return value === option.ref.value && compareRef(option.ref);\r\n                    })\r\n                : compareRef(field.ref))) {\r\n            fields[name] = Object.assign(Object.assign({}, field), options);\r\n            return;\r\n        }\r\n        if (type) {\r\n            field = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...compact((field && field.options) || []),\r\n                        {\r\n                            ref,\r\n                        },\r\n                    ], ref: { type, name } }, options) : Object.assign({}, fieldRefAndValidationOptions);\r\n        }\r\n        else {\r\n            field = fieldRefAndValidationOptions;\r\n        }\r\n        fields[name] = field;\r\n        const isEmptyUnmountFields = isUndefined(get(shallowFieldsStateRef.current, name));\r\n        if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\r\n            defaultValue = get(isEmptyUnmountFields\r\n                ? defaultValuesRef.current\r\n                : shallowFieldsStateRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(name, defaultValue);\r\n            }\r\n        }\r\n        if (!isEmptyObject(options)) {\r\n            set(fieldsWithValidationRef.current, name, true);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef).then((error) => {\r\n                    const previousFormIsValid = formStateRef.current.isValid;\r\n                    isEmptyObject(error)\r\n                        ? set(validFieldsRef.current, name, true)\r\n                        : unset(validFieldsRef.current, name);\r\n                    previousFormIsValid !== isEmptyObject(error) && updateFormState();\r\n                });\r\n            }\r\n        }\r\n        if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\r\n            !isFieldArray && unset(formStateRef.current.dirtyFields, name);\r\n        }\r\n        if (type) {\r\n            attachEventListeners(isRadioOrCheckbox && field.options\r\n                ? field.options[field.options.length - 1]\r\n                : field, isRadioOrCheckbox || isSelectInput(ref), handleChangeRef.current);\r\n        }\r\n    }\r\n    function register(refOrRegisterOptions, options) {\r\n        if (!isWindowUndefined) {\r\n            if (isString(refOrRegisterOptions)) {\r\n                registerFieldRef({ name: refOrRegisterOptions }, options);\r\n            }\r\n            else if (isObject(refOrRegisterOptions) &&\r\n                'name' in refOrRegisterOptions) {\r\n                registerFieldRef(refOrRegisterOptions, options);\r\n            }\r\n            else {\r\n                return (ref) => ref && registerFieldRef(ref, refOrRegisterOptions);\r\n            }\r\n        }\r\n    }\r\n    const handleSubmit = useCallback((onValid, onInvalid) => async (e) => {\r\n        if (e && e.preventDefault) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors = {};\r\n        let fieldValues = setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, true));\r\n        readFormStateRef.current.isSubmitting &&\r\n            updateFormState({\r\n                isSubmitting: true,\r\n            });\r\n        try {\r\n            if (resolverRef.current) {\r\n                const { errors, values } = await resolverRef.current(fieldValues, contextRef.current, isValidateAllFieldCriteria);\r\n                formStateRef.current.errors = fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                for (const field of Object.values(fieldsRef.current)) {\r\n                    if (field) {\r\n                        const { name } = field.ref;\r\n                        const fieldError = await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef);\r\n                        if (fieldError[name]) {\r\n                            set(fieldErrors, name, fieldError[name]);\r\n                            unset(validFieldsRef.current, name);\r\n                        }\r\n                        else if (get(fieldsWithValidationRef.current, name)) {\r\n                            unset(formStateRef.current.errors, name);\r\n                            set(validFieldsRef.current, name, true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyObject(fieldErrors) &&\r\n                Object.keys(formStateRef.current.errors).every((name) => name in fieldsRef.current)) {\r\n                updateFormState({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                formStateRef.current.errors = Object.assign(Object.assign({}, formStateRef.current.errors), fieldErrors);\r\n                onInvalid && (await onInvalid(formStateRef.current.errors, e));\r\n                shouldFocusError &&\r\n                    focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\r\n            }\r\n        }\r\n        finally {\r\n            formStateRef.current.isSubmitting = false;\r\n            updateFormState({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\r\n                submitCount: formStateRef.current.submitCount + 1,\r\n            });\r\n        }\r\n    }, [shouldFocusError, isValidateAllFieldCriteria]);\r\n    const resetRefs = ({ errors, isDirty, isSubmitted, touched, isValid, submitCount, dirtyFields, }) => {\r\n        if (!isValid) {\r\n            validFieldsRef.current = {};\r\n            fieldsWithValidationRef.current = {};\r\n        }\r\n        fieldArrayDefaultValuesRef.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n        updateFormState({\r\n            submitCount: submitCount ? formStateRef.current.submitCount : 0,\r\n            isDirty: isDirty ? formStateRef.current.isDirty : false,\r\n            isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\r\n            isValid: isValid ? formStateRef.current.isValid : false,\r\n            dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\r\n            touched: touched ? formStateRef.current.touched : {},\r\n            errors: errors ? formStateRef.current.errors : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const reset = (values, omitResetState = {}) => {\r\n        if (isWeb) {\r\n            for (const field of Object.values(fieldsRef.current)) {\r\n                if (field) {\r\n                    const { ref, options } = field;\r\n                    const inputRef = isRadioOrCheckboxFunction(ref) && Array.isArray(options)\r\n                        ? options[0].ref\r\n                        : ref;\r\n                    if (isHTMLElement(inputRef)) {\r\n                        try {\r\n                            inputRef.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        fieldsRef.current = {};\r\n        defaultValuesRef.current = Object.assign({}, (values || defaultValuesRef.current));\r\n        values && renderWatchedInputs('');\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach((resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray());\r\n        shallowFieldsStateRef.current = shouldUnregister\r\n            ? {}\r\n            : cloneObject(values || defaultValuesRef.current);\r\n        resetRefs(omitResetState);\r\n    };\r\n    useEffect(() => {\r\n        resolver && readFormStateRef.current.isValid && validateResolver();\r\n        observerRef.current =\r\n            observerRef.current || !isWeb\r\n                ? observerRef.current\r\n                : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\r\n    }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\r\n    useEffect(() => () => {\r\n        observerRef.current && observerRef.current.disconnect();\r\n        isUnMount.current = true;\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            return;\r\n        }\r\n        Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, []);\r\n    if (!resolver && readFormStateRef.current.isValid) {\r\n        formState.isValid =\r\n            deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\r\n                isEmptyObject(formStateRef.current.errors);\r\n    }\r\n    const commonProps = {\r\n        trigger,\r\n        setValue: useCallback(setValue, [setInternalValue, trigger]),\r\n        getValues: useCallback(getValues, []),\r\n        register: useCallback(register, [defaultValuesRef.current]),\r\n        unregister: useCallback(unregister, []),\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        if (prop === 'isValid' && isOnSubmit) {\r\n                            console.warn('📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState');\r\n                        }\r\n                    }\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return undefined;\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n    const control = useMemo(() => (Object.assign({ isFormDirty,\r\n        updateWatchedValue,\r\n        shouldUnregister,\r\n        updateFormState,\r\n        removeFieldEventListener,\r\n        watchInternal, mode: modeRef.current, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnChange,\r\n        }, validateResolver: resolver ? validateResolver : undefined, fieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        useWatchFieldsRef,\r\n        useWatchRenderFunctionsRef,\r\n        fieldArrayDefaultValuesRef,\r\n        validFieldsRef,\r\n        fieldsWithValidationRef,\r\n        fieldArrayNamesRef,\r\n        readFormStateRef,\r\n        formStateRef,\r\n        defaultValuesRef,\r\n        shallowFieldsStateRef,\r\n        fieldArrayValuesRef }, commonProps)), [\r\n        defaultValuesRef.current,\r\n        updateWatchedValue,\r\n        shouldUnregister,\r\n        removeFieldEventListener,\r\n        watchInternal,\r\n    ]);\r\n    return Object.assign({ watch,\r\n        control,\r\n        handleSubmit, reset: useCallback(reset, []), clearErrors: useCallback(clearErrors, []), setError: useCallback(setError, []), errors: formState.errors }, commonProps);\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormContext = createContext(null);\r\nFormContext.displayName = 'RHFContext';\r\nconst useFormContext = () => useContext(FormContext);\r\nconst FormProvider = (_a) => {\r\n    var { children } = _a, props = __rest(_a, [\"children\"]);\r\n    return (createElement(FormContext.Provider, { value: Object.assign({}, props) }, children));\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, (Array.isArray(index) ? index : [index]).sort());\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (Array.isArray(data)) {\r\n        if (isUndefined(data[to])) {\r\n            data[to] = undefined;\r\n        }\r\n        data.splice(to, 0, data.splice(from, 1)[0]);\r\n        return data;\r\n    }\r\n    return [];\r\n};\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    const temp = [data[indexB], data[indexA]];\r\n    data[indexA] = temp[0];\r\n    data[indexB] = temp[1];\r\n};\n\nfunction prepend(data, value) {\r\n    return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\r\n}\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...(Array.isArray(value) ? value : [value || undefined]),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n\nvar fillBooleanArray = (value) => (Array.isArray(value) ? value : [value]).map((data) => {\r\n    if (isObject(data)) {\r\n        const object = {};\r\n        for (const key in data) {\r\n            object[key] = true;\r\n        }\r\n        return object;\r\n    }\r\n    return true;\r\n});\n\nconst mapIds = (values = [], keyName, skipWarn) => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!skipWarn) {\r\n            for (const value of values) {\r\n                if (typeof value === 'object') {\r\n                    if (keyName in value) {\r\n                        console.warn(`📋 useFieldArray fieldValues contain the keyName \\`${keyName}\\` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray`);\r\n                        break;\r\n                    }\r\n                }\r\n                else {\r\n                    console.warn(`📋 useFieldArray input's name should be in object shape instead of flat array. https://react-hook-form.com/api#useFieldArray`);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return values.map((value) => (Object.assign({ [keyName]: value[keyName] || generateId() }, value)));\r\n};\r\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!control && !methods) {\r\n            throw new Error('📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray');\r\n        }\r\n    }\r\n    const focusIndexRef = useRef(-1);\r\n    const isUnMount = useRef(false);\r\n    const { isFormDirty, updateWatchedValue, resetFieldArrayFunctionRef, fieldArrayNamesRef, fieldsRef, defaultValuesRef, removeFieldEventListener, formStateRef, shallowFieldsStateRef, updateFormState, readFormStateRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValuesRef, validateResolver, getValues, shouldUnregister, fieldArrayValuesRef, } = control || methods.control;\r\n    const getDefaultValues = (values) => get(shouldUnregister ? values : shallowFieldsStateRef.current, name, []);\r\n    const fieldArrayParentName = getFieldArrayParentName(name);\r\n    const memoizedDefaultValues = useRef([\r\n        ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\r\n            ? getDefaultValues(fieldArrayDefaultValuesRef.current)\r\n            : getDefaultValues(defaultValuesRef.current)),\r\n    ]);\r\n    const [fields, setFields] = useState(mapIds(memoizedDefaultValues.current, keyName));\r\n    set(fieldArrayValuesRef.current, name, fields);\r\n    const omitKey = (fields) => fields.map((_a = {}) => {\r\n        var _b = keyName, omitted = _a[_b], rest = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\r\n        return rest;\r\n    });\r\n    fieldArrayNamesRef.current.add(name);\r\n    const getFieldArrayValue = useCallback(() => get(fieldArrayValuesRef.current, name, []), [name]);\r\n    const getCurrentFieldsValues = () => mapIds(get(getValues(), name, getFieldArrayValue()).map((item, index) => (Object.assign(Object.assign({}, getFieldArrayValue()[index]), item))), keyName, true);\r\n    fieldArrayNamesRef.current.add(name);\r\n    if (fieldArrayParentName &&\r\n        !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\r\n        set(fieldArrayDefaultValuesRef.current, fieldArrayParentName, cloneObject(get(defaultValuesRef.current, fieldArrayParentName)));\r\n    }\r\n    const setFieldAndValidState = (fieldsValues) => {\r\n        setFields(fieldsValues);\r\n        set(fieldArrayValuesRef.current, name, fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateResolver) {\r\n            const values = getValues();\r\n            set(values, name, fieldsValues);\r\n            validateResolver(values);\r\n        }\r\n    };\r\n    const resetFields = () => {\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name)) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n                delete fieldsRef.current[key];\r\n            }\r\n        }\r\n    };\r\n    const cleanup = (ref) => !compact(get(ref, name, [])).length && unset(ref, name);\r\n    const updateDirtyFieldsWithDefaultValues = (updatedFieldArrayValues) => {\r\n        if (updatedFieldArrayValues) {\r\n            set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n        }\r\n    };\r\n    const batchStateUpdate = (method, args, updatedFieldValues, updatedFormValues = [], shouldSet = true, shouldUpdateValid = false) => {\r\n        if (get(shallowFieldsStateRef.current, name)) {\r\n            const output = method(get(shallowFieldsStateRef.current, name), args.argA, args.argB);\r\n            shouldSet && set(shallowFieldsStateRef.current, name, output);\r\n        }\r\n        if (get(fieldArrayDefaultValuesRef.current, name)) {\r\n            const output = method(get(fieldArrayDefaultValuesRef.current, name), args.argA, args.argB);\r\n            shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\r\n        }\r\n        if (Array.isArray(get(formStateRef.current.errors, name))) {\r\n            const output = method(get(formStateRef.current.errors, name), args.argA, args.argB);\r\n            shouldSet && set(formStateRef.current.errors, name, output);\r\n            cleanup(formStateRef.current.errors);\r\n        }\r\n        if (readFormStateRef.current.touched &&\r\n            get(formStateRef.current.touched, name)) {\r\n            const output = method(get(formStateRef.current.touched, name), args.argA, args.argB);\r\n            shouldSet && set(formStateRef.current.touched, name, output);\r\n            cleanup(formStateRef.current.touched);\r\n        }\r\n        if (readFormStateRef.current.dirtyFields ||\r\n            readFormStateRef.current.isDirty) {\r\n            set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFormValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n            updateDirtyFieldsWithDefaultValues(updatedFieldValues);\r\n            cleanup(formStateRef.current.dirtyFields);\r\n        }\r\n        if (shouldUpdateValid &&\r\n            readFormStateRef.current.isValid &&\r\n            !validateResolver) {\r\n            set(validFieldsRef.current, name, method(get(validFieldsRef.current, name, []), args.argA));\r\n            cleanup(validFieldsRef.current);\r\n            set(fieldsWithValidationRef.current, name, method(get(fieldsWithValidationRef.current, name, []), args.argA));\r\n            cleanup(fieldsWithValidationRef.current);\r\n        }\r\n        if (!isUnMount.current && readFormStateRef.current.isDirty) {\r\n            updateFormState({\r\n                isDirty: isFormDirty(name, omitKey(updatedFormValues)),\r\n            });\r\n        }\r\n    };\r\n    const append = (value, shouldFocus = true) => {\r\n        const appendValue = Array.isArray(value) ? value : [value];\r\n        const updateFormValues = [\r\n            ...getCurrentFieldsValues(),\r\n            ...mapIds(appendValue, keyName),\r\n        ];\r\n        setFieldAndValidState(updateFormValues);\r\n        if (readFormStateRef.current.dirtyFields ||\r\n            readFormStateRef.current.isDirty) {\r\n            updateDirtyFieldsWithDefaultValues(updateFormValues);\r\n            updateFormState({\r\n                isDirty: true,\r\n                dirtyFields: formStateRef.current.dirtyFields,\r\n            });\r\n        }\r\n        !shouldUnregister &&\r\n            set(shallowFieldsStateRef.current, name, [\r\n                ...(get(shallowFieldsStateRef.current, name) || []),\r\n                ...cloneObject(appendValue),\r\n            ]);\r\n        focusIndexRef.current = shouldFocus\r\n            ? get(fieldArrayValuesRef.current, name).length - 1\r\n            : -1;\r\n    };\r\n    const prepend$1 = (value, shouldFocus = true) => {\r\n        const emptyArray = fillEmptyArray(value);\r\n        const updatedFieldArrayValues = prepend(getCurrentFieldsValues(), mapIds(Array.isArray(value) ? value : [value], keyName));\r\n        setFieldAndValidState(updatedFieldArrayValues);\r\n        resetFields();\r\n        batchStateUpdate(prepend, {\r\n            argA: emptyArray,\r\n            argC: fillBooleanArray(value),\r\n        }, updatedFieldArrayValues);\r\n        focusIndexRef.current = shouldFocus ? 0 : -1;\r\n    };\r\n    const remove = (index) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        const updatedFieldValues = removeArrayAt(fieldValues, index);\r\n        setFieldAndValidState(updatedFieldValues);\r\n        resetFields();\r\n        batchStateUpdate(removeArrayAt, {\r\n            argA: index,\r\n            argC: index,\r\n        }, updatedFieldValues, removeArrayAt(fieldValues, index), true, true);\r\n    };\r\n    const insert$1 = (index, value, shouldFocus = true) => {\r\n        const emptyArray = fillEmptyArray(value);\r\n        const fieldValues = getCurrentFieldsValues();\r\n        const updatedFieldArrayValues = insert(fieldValues, index, mapIds(Array.isArray(value) ? value : [value], keyName));\r\n        setFieldAndValidState(updatedFieldArrayValues);\r\n        resetFields();\r\n        batchStateUpdate(insert, {\r\n            argA: index,\r\n            argB: emptyArray,\r\n            argC: index,\r\n            argD: fillBooleanArray(value),\r\n        }, updatedFieldArrayValues, insert(fieldValues, index));\r\n        focusIndexRef.current = shouldFocus ? index : -1;\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields();\r\n        setFieldAndValidState([...fieldValues]);\r\n        batchStateUpdate(swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n            argC: indexA,\r\n            argD: indexB,\r\n        }, undefined, fieldValues, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields();\r\n        setFieldAndValidState([...fieldValues]);\r\n        batchStateUpdate(moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n            argC: from,\r\n            argD: to,\r\n        }, undefined, fieldValues, false);\r\n    };\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!name) {\r\n                console.warn('📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray');\r\n            }\r\n        }\r\n        const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\r\n        if (defaultValues && fields.length < defaultValues.length) {\r\n            set(fieldArrayDefaultValuesRef.current, name, defaultValues.slice(1));\r\n        }\r\n        updateWatchedValue(name);\r\n        if (focusIndexRef.current > -1) {\r\n            for (const key in fieldsRef.current) {\r\n                const field = fieldsRef.current[key];\r\n                if (key.startsWith(`${name}[${focusIndexRef.current}]`) &&\r\n                    field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        focusIndexRef.current = -1;\r\n    }, [fields, name]);\r\n    useEffect(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        if (!getFieldArrayParentName(name)) {\r\n            resetFunctions[name] = (data) => {\r\n                resetFields();\r\n                !data && unset(fieldArrayDefaultValuesRef.current, name);\r\n                unset(shallowFieldsStateRef.current, name);\r\n                memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\r\n                if (!isUnMount.current) {\r\n                    setFields(mapIds(memoizedDefaultValues.current, keyName));\r\n                }\r\n            };\r\n        }\r\n        return () => {\r\n            isUnMount.current = true;\r\n            shouldUnregister && remove();\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            unset(fieldArrayValuesRef.current, name);\r\n            fieldArrayNames.delete(name);\r\n        };\r\n    }, []);\r\n    return {\r\n        swap: useCallback(swap, [name]),\r\n        move: useCallback(move, [name]),\r\n        prepend: useCallback(prepend$1, [name]),\r\n        append: useCallback(append, [name]),\r\n        remove: useCallback(remove, [name]),\r\n        insert: useCallback(insert$1, [name]),\r\n        fields,\r\n    };\r\n};\n\nvar getInputValue = (event) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nfunction useController({ name, rules, defaultValue, control, onFocus, }) {\r\n    const methods = useFormContext();\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!control && !methods) {\r\n            throw new Error('📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller');\r\n        }\r\n    }\r\n    const { defaultValuesRef, setValue, register, unregister, trigger, mode, reValidateMode: { isReValidateOnBlur, isReValidateOnChange }, formState, formStateRef: { current: { isSubmitted, touched, errors }, }, updateFormState, readFormStateRef, fieldsRef, fieldArrayNamesRef, shallowFieldsStateRef, } = control || methods.control;\r\n    const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n    const getInitialValue = () => !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\r\n        ? get(shallowFieldsStateRef.current, name)\r\n        : isUndefined(defaultValue)\r\n            ? get(defaultValuesRef.current, name)\r\n            : defaultValue;\r\n    const [value, setInputStateValue] = useState(getInitialValue());\r\n    const valueRef = useRef(value);\r\n    const ref = useRef({\r\n        focus: () => null,\r\n    });\r\n    const onFocusRef = useRef(onFocus ||\r\n        (() => {\r\n            if (isFunction(ref.current.focus)) {\r\n                ref.current.focus();\r\n            }\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (!isFunction(ref.current.focus)) {\r\n                    console.warn(`📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`);\r\n                }\r\n            }\r\n        }));\r\n    const shouldValidate = useCallback((isBlurEvent) => !skipValidation(Object.assign({ isBlurEvent,\r\n        isReValidateOnBlur,\r\n        isReValidateOnChange,\r\n        isSubmitted, isTouched: !!get(touched, name) }, mode)), [\r\n        isReValidateOnBlur,\r\n        isReValidateOnChange,\r\n        isSubmitted,\r\n        touched,\r\n        name,\r\n        mode,\r\n    ]);\r\n    const commonTask = useCallback(([event]) => {\r\n        const data = getInputValue(event);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    }, []);\r\n    const registerField = useCallback((shouldUpdateValue) => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!name) {\r\n                return console.warn('📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller');\r\n            }\r\n        }\r\n        if (fieldsRef.current[name]) {\r\n            fieldsRef.current[name] = Object.assign({ ref: fieldsRef.current[name].ref }, rules);\r\n        }\r\n        else {\r\n            register(Object.defineProperties({\r\n                name,\r\n                focus: onFocusRef.current,\r\n            }, {\r\n                value: {\r\n                    set(data) {\r\n                        setInputStateValue(data);\r\n                        valueRef.current = data;\r\n                    },\r\n                    get() {\r\n                        return valueRef.current;\r\n                    },\r\n                },\r\n            }), rules);\r\n            shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\r\n        }\r\n        shouldUpdateValue &&\r\n            isNotFieldArray &&\r\n            setInputStateValue(getInitialValue());\r\n    }, [rules, name, register]);\r\n    useEffect(() => () => unregister(name), [name]);\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (isUndefined(value)) {\r\n                console.warn(`📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`);\r\n            }\r\n            if (!isNotFieldArray && isUndefined(defaultValue)) {\r\n                console.warn('📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller');\r\n            }\r\n        }\r\n        registerField();\r\n    }, [registerField]);\r\n    useEffect(() => {\r\n        !fieldsRef.current[name] && registerField(true);\r\n    });\r\n    const onBlur = useCallback(() => {\r\n        if (readFormStateRef.current.touched && !get(touched, name)) {\r\n            set(touched, name, true);\r\n            updateFormState({\r\n                touched,\r\n            });\r\n        }\r\n        shouldValidate(true) && trigger(name);\r\n    }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\r\n    const onChange = useCallback((...event) => setValue(name, commonTask(event), {\r\n        shouldValidate: shouldValidate(),\r\n        shouldDirty: true,\r\n    }), [setValue, name, shouldValidate]);\r\n    return {\r\n        field: {\r\n            onChange,\r\n            onBlur,\r\n            name,\r\n            value,\r\n            ref,\r\n        },\r\n        meta: Object.defineProperties({\r\n            invalid: !!get(errors, name),\r\n        }, {\r\n            isDirty: {\r\n                get() {\r\n                    return !!get(formState.dirtyFields, name);\r\n                },\r\n            },\r\n            isTouched: {\r\n                get() {\r\n                    return !!get(formState.touched, name);\r\n                },\r\n            },\r\n        }),\r\n    };\r\n}\n\nfunction useWatch({ control, name, defaultValue, }) {\r\n    const methods = useFormContext();\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!control && !methods) {\r\n            throw new Error('📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch');\r\n        }\r\n    }\r\n    const { useWatchFieldsRef, useWatchRenderFunctionsRef, watchInternal, defaultValuesRef, } = control || methods.control;\r\n    const updateValue = useState()[1];\r\n    const idRef = useRef();\r\n    const defaultValueRef = useRef(defaultValue);\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (name === '') {\r\n                console.warn('📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch');\r\n            }\r\n        }\r\n        const id = (idRef.current = generateId());\r\n        const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\r\n        const watchFieldsHook = useWatchFieldsRef.current;\r\n        watchFieldsHook[id] = new Set();\r\n        watchFieldsHookRender[id] = () => updateValue({});\r\n        watchInternal(name, defaultValueRef.current, id);\r\n        return () => {\r\n            delete watchFieldsHook[id];\r\n            delete watchFieldsHookRender[id];\r\n        };\r\n    }, [\r\n        name,\r\n        useWatchRenderFunctionsRef,\r\n        useWatchFieldsRef,\r\n        watchInternal,\r\n        defaultValueRef,\r\n    ]);\r\n    return idRef.current\r\n        ? watchInternal(name, defaultValueRef.current, idRef.current)\r\n        : isUndefined(defaultValue)\r\n            ? isString(name)\r\n                ? get(defaultValuesRef.current, name)\r\n                : Array.isArray(name)\r\n                    ? name.reduce((previous, inputName) => (Object.assign(Object.assign({}, previous), { [inputName]: get(defaultValuesRef.current, inputName) })), {})\r\n                    : defaultValuesRef.current\r\n            : defaultValue;\r\n}\n\nconst Controller = (props) => {\r\n    const { rules, as, render, defaultValue, control, onFocus } = props, rest = __rest(props, [\"rules\", \"as\", \"render\", \"defaultValue\", \"control\", \"onFocus\"]);\r\n    const { field, meta } = useController(props);\r\n    const componentProps = Object.assign(Object.assign({}, rest), field);\r\n    return as\r\n        ? isValidElement(as)\r\n            ? cloneElement(as, componentProps)\r\n            : createElement(as, componentProps)\r\n        : render\r\n            ? render(field, meta)\r\n            : null;\r\n};\n\nexport { Controller, FormProvider, appendErrors, get, transformToNestObject, useController, useFieldArray, useForm, useFormContext, useWatch };\n//# sourceMappingURL=index.esm.js.map\n","import React from \"react\";\nvar __jsx = React.createElement;\nimport Image from 'next/image';\nimport { useForm } from 'react-hook-form';\nimport { Alert } from 'react-bootstrap';\nimport Layout from '../compoenets/layout';\n\nvar Register = function Register() {\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit;\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"flex flex-col h-full w-full justify-content space-x-4 m-10 p-10  \"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(function (data) {\n      alert(JSON.stringify(data));\n    })\n  }, __jsx(\"div\", null, __jsx(\"label\", {\n    className: \"text-l mt-4 font-bold text-logodark block text-right\"\n  }, \"\\u0627\\u0644\\u0628\\u0631\\u064A\\u062F \\u0627\\u0644\\u0625\\u0644\\u0643\\u062A\\u0631\\u0648\\u0646\\u064A\"), __jsx(\"input\", {\n    ref: register,\n    type: \"text\",\n    className: \"w-full p-2 mt-4 border border-gray-300 rounded mt-1\",\n    name: \"email\"\n  })), __jsx(\"div\", null, __jsx(\"label\", {\n    className: \"text-l mt-4 font-bold text-logodark block text-right\"\n  }, \"\\u0643\\u0644\\u0645\\u0629 \\u0627\\u0644\\u0645\\u0631\\u0648\\u0631\"), __jsx(\"input\", {\n    ref: register,\n    type: \"password\",\n    className: \"w-full p-2 mt-4 border border-gray-300 rounded mt-1\",\n    name: \"password\"\n  })), __jsx(\"div\", null, __jsx(\"label\", {\n    className: \"text-l mt-4 font-bold text-logodark block text-right\"\n  }, \"\\u0625\\u0639\\u0627\\u062F\\u0629 \\u0643\\u0644\\u0645\\u0629 \\u0627\\u0644\\u0645\\u0631\\u0648\\u0631\"), __jsx(\"input\", {\n    ref: register,\n    type: \"password\",\n    className: \"w-full p-2 mt-4 border border-gray-300 rounded mt-1\",\n    name: \"repassword\"\n  })), __jsx(\"div\", null, __jsx(\"button\", {\n    type: \"Submit\",\n    className: \"text-l font-bold text-white mt-4 text-center button w-full py-2 px-4 bg-logodark hover:bg-black rounded-xl\"\n  }, \"\\u062A\\u0633\\u062C\\u064A\\u0644\")))));\n};\n\nexport default Register;","import React from \"react\";\nvar __jsx = React.createElement;\n\nvar Layout = function Layout(_ref) {\n  var children = _ref.children;\n  return __jsx(\"div\", {\n    className: \"font-body flex flex-row-reverse h-screen   p-4 bg-logodark\"\n  }, __jsx(\"title\", null, \"\\u0644\\u0648\\u062D\\u0629 \\u0627\\u0644\\u062A\\u062D\\u0643\\u0645\"), __jsx(\"ul\", {\n    className: \"bg-lightest absolute w-44 font-bold p-2 mb-2 rounded-xl\"\n  }, __jsx(\"a\", {\n    href: \"/login\"\n  }, __jsx(Row, {\n    icon: \"login\"\n  }, \"\\u062F\\u062E\\u0648\\u0644\"))), __jsx(\"div\", {\n    className: \"flex items-center\"\n  }, __jsx(\"aside\", {\n    className: \"bg-lightest flex-row items-center font-bold hover:rounded-xl rounded-xl \"\n  }, __jsx(\"nav\", null, __jsx(\"ul\", null, __jsx(\"div\", {\n    className: \"grid grid-cols-1 col-center-1 divide-y divide-Gray\"\n  }, __jsx(\"a\", {\n    href: \"/register\"\n  }, \"     \", __jsx(Row, {\n    icon: \"home\"\n  }, \" \\u0627\\u0644\\u0631\\u0626\\u064A\\u0633\\u064A\\u0629\"), \"           \"), __jsx(\"a\", {\n    href: \"/Process\"\n  }, \"      \", __jsx(Row, {\n    icon: \"process\"\n  }, \"\\u0627\\u0644\\u0639\\u0645\\u0644\\u064A\\u0627\\u062A\"), \"        \"), __jsx(\"a\", {\n    href: \"/SalesEmployee\"\n  }, __jsx(Row, {\n    icon: \"salesemp\"\n  }, \"\\u0645\\u0648\\u0638\\u0641\\u064A\\u0646 \\u0627\\u0644\\u0645\\u0628\\u064A\\u0639\\u0627\\u062A\")), __jsx(\"a\", {\n    href: \"/Reports\"\n  }, \"      \", __jsx(Row, {\n    icon: \"reports\"\n  }, \"\\u0627\\u0644\\u062A\\u0642\\u0627\\u0631\\u064A\\u0631\"), \"        \"), __jsx(\"a\", {\n    href: \"/Clients\"\n  }, \"      \", __jsx(Row, {\n    icon: \"clients\"\n  }, \"\\u0627\\u0644\\u0639\\u0645\\u0644\\u0627\\u0621\"), \"          \"), __jsx(\"a\", {\n    href: \"/Requests\"\n  }, \"     \", __jsx(Row, {\n    icon: \"requests\"\n  }, \"\\u0627\\u0644\\u0637\\u0644\\u0628\\u0627\\u062A\"), \"        \"), __jsx(\"a\", {\n    href: \"/FieldOffers\"\n  }, \"  \", __jsx(Row, {\n    icon: \"fieldoff\"\n  }, \"\\u0639\\u0631\\u0648\\u0636 \\u0627\\u0644\\u0645\\u064A\\u062F\\u0627\\u0646\"), \"   \")))))), __jsx(\"div\", {\n    className: \"flex flex-grow h-10/12 bg-lightest  mr-6 p-6 rounded-2xl \"\n  }, children));\n};\n\nvar Row = function Row(props) {\n  return __jsx(\"li\", {\n    className: \"flex text-xl p-6 space-x-3  items-center justify-end hover:bg-gray-200\"\n  }, __jsx(\"span\", null, props.children), icons[props.icon]);\n};\n\nvar icons = {\n  home: __jsx(\"svg\", {\n    className: \"svg-icon\",\n    viewBox: \"0 0 30 20\"\n  }, __jsx(\"path\", {\n    d: \"M18.121,9.88l-7.832-7.836c-0.155-0.158-0.428-0.155-0.584,0L1.842,9.913c-0.262,0.263-0.073,0.705,0.292,0.705h2.069v7.042c0,0.227,0.187,0.414,0.414,0.414h3.725c0.228,0,0.414-0.188,0.414-0.414v-3.313h2.483v3.313c0,0.227,0.187,0.414,0.413,0.414h3.726c0.229,0,0.414-0.188,0.414-0.414v-7.042h2.068h0.004C18.331,10.617,18.389,10.146,18.121,9.88 M14.963,17.245h-2.896v-3.313c0-0.229-0.186-0.415-0.414-0.415H8.342c-0.228,0-0.414,0.187-0.414,0.415v3.313H5.032v-6.628h9.931V17.245z M3.133,9.79l6.864-6.868l6.867,6.868H3.133z\"\n  })),\n  process: __jsx(\"svg\", {\n    className: \"svg-icon\",\n    viewBox: \"0 0 30 20\"\n  }, __jsx(\"path\", {\n    d: \"M14.68,12.621c-0.9,0-1.702,0.43-2.216,1.09l-4.549-2.637c0.284-0.691,0.284-1.457,0-2.146l4.549-2.638c0.514,0.661,1.315,1.09,2.216,1.09c1.549,0,2.809-1.26,2.809-2.808c0-1.548-1.26-2.809-2.809-2.809c-1.548,0-2.808,1.26-2.808,2.809c0,0.38,0.076,0.741,0.214,1.073l-4.55,2.638c-0.515-0.661-1.316-1.09-2.217-1.09c-1.548,0-2.808,1.26-2.808,2.809s1.26,2.808,2.808,2.808c0.9,0,1.702-0.43,2.217-1.09l4.55,2.637c-0.138,0.332-0.214,0.693-0.214,1.074c0,1.549,1.26,2.809,2.808,2.809c1.549,0,2.809-1.26,2.809-2.809S16.229,12.621,14.68,12.621M14.68,2.512c1.136,0,2.06,0.923,2.06,2.06S15.815,6.63,14.68,6.63s-2.059-0.923-2.059-2.059S13.544,2.512,14.68,2.512M5.319,12.061c-1.136,0-2.06-0.924-2.06-2.06s0.923-2.059,2.06-2.059c1.135,0,2.06,0.923,2.06,2.059S6.454,12.061,5.319,12.061M14.68,17.488c-1.136,0-2.059-0.922-2.059-2.059s0.923-2.061,2.059-2.061s2.06,0.924,2.06,2.061S15.815,17.488,14.68,17.488\"\n  })),\n  salesemp: __jsx(\"svg\", {\n    className: \"svg-icon\",\n    viewBox: \"0 0 30 20\"\n  }, __jsx(\"path\", {\n    d: \"M15.573,11.624c0.568-0.478,0.947-1.219,0.947-2.019c0-1.37-1.108-2.569-2.371-2.569s-2.371,1.2-2.371,2.569c0,0.8,0.379,1.542,0.946,2.019c-0.253,0.089-0.496,0.2-0.728,0.332c-0.743-0.898-1.745-1.573-2.891-1.911c0.877-0.61,1.486-1.666,1.486-2.812c0-1.79-1.479-3.359-3.162-3.359S4.269,5.443,4.269,7.233c0,1.146,0.608,2.202,1.486,2.812c-2.454,0.725-4.252,2.998-4.252,5.685c0,0.218,0.178,0.396,0.395,0.396h16.203c0.218,0,0.396-0.178,0.396-0.396C18.497,13.831,17.273,12.216,15.573,11.624 M12.568,9.605c0-0.822,0.689-1.779,1.581-1.779s1.58,0.957,1.58,1.779s-0.688,1.779-1.58,1.779S12.568,10.427,12.568,9.605 M5.06,7.233c0-1.213,1.014-2.569,2.371-2.569c1.358,0,2.371,1.355,2.371,2.569S8.789,9.802,7.431,9.802C6.073,9.802,5.06,8.447,5.06,7.233 M2.309,15.335c0.202-2.649,2.423-4.742,5.122-4.742s4.921,2.093,5.122,4.742H2.309z M13.346,15.335c-0.067-0.997-0.382-1.928-0.882-2.732c0.502-0.271,1.075-0.429,1.686-0.429c1.828,0,3.338,1.385,3.535,3.161H13.346z\"\n  })),\n  reports: __jsx(\"svg\", {\n    className: \"svg-icon\",\n    viewBox: \"0 0 30 20\"\n  }, __jsx(\"path\", {\n    d: \"M15.396,2.292H4.604c-0.212,0-0.385,0.174-0.385,0.386v14.646c0,0.212,0.173,0.385,0.385,0.385h10.792c0.211,0,0.385-0.173,0.385-0.385V2.677C15.781,2.465,15.607,2.292,15.396,2.292 M15.01,16.938H4.99v-2.698h1.609c0.156,0.449,0.586,0.771,1.089,0.771c0.638,0,1.156-0.519,1.156-1.156s-0.519-1.156-1.156-1.156c-0.503,0-0.933,0.321-1.089,0.771H4.99v-3.083h1.609c0.156,0.449,0.586,0.771,1.089,0.771c0.638,0,1.156-0.518,1.156-1.156c0-0.638-0.519-1.156-1.156-1.156c-0.503,0-0.933,0.322-1.089,0.771H4.99V6.531h1.609C6.755,6.98,7.185,7.302,7.688,7.302c0.638,0,1.156-0.519,1.156-1.156c0-0.638-0.519-1.156-1.156-1.156c-0.503,0-0.933,0.322-1.089,0.771H4.99V3.062h10.02V16.938z M7.302,13.854c0-0.212,0.173-0.386,0.385-0.386s0.385,0.174,0.385,0.386s-0.173,0.385-0.385,0.385S7.302,14.066,7.302,13.854 M7.302,10c0-0.212,0.173-0.385,0.385-0.385S8.073,9.788,8.073,10s-0.173,0.385-0.385,0.385S7.302,10.212,7.302,10 M7.302,6.146c0-0.212,0.173-0.386,0.385-0.386s0.385,0.174,0.385,0.386S7.899,6.531,7.688,6.531S7.302,6.358,7.302,6.146\"\n  })),\n  clients: __jsx(\"svg\", {\n    className: \"svg-icon\",\n    viewBox: \"0 0 30 20\"\n  }, __jsx(\"path\", {\n    d: \"M12.075,10.812c1.358-0.853,2.242-2.507,2.242-4.037c0-2.181-1.795-4.618-4.198-4.618S5.921,4.594,5.921,6.775c0,1.53,0.884,3.185,2.242,4.037c-3.222,0.865-5.6,3.807-5.6,7.298c0,0.23,0.189,0.42,0.42,0.42h14.273c0.23,0,0.42-0.189,0.42-0.42C17.676,14.619,15.297,11.677,12.075,10.812 M6.761,6.775c0-2.162,1.773-3.778,3.358-3.778s3.359,1.616,3.359,3.778c0,2.162-1.774,3.778-3.359,3.778S6.761,8.937,6.761,6.775 M3.415,17.69c0.218-3.51,3.142-6.297,6.704-6.297c3.562,0,6.486,2.787,6.705,6.297H3.415z\"\n  })),\n  requests: __jsx(\"svg\", {\n    className: \"svg-icon\",\n    viewBox: \"0 0 30 20\"\n  }, __jsx(\"path\", {\n    d: \"M17.218,2.268L2.477,8.388C2.13,8.535,2.164,9.05,2.542,9.134L9.33,10.67l1.535,6.787c0.083,0.377,0.602,0.415,0.745,0.065l6.123-14.74C17.866,2.46,17.539,2.134,17.218,2.268 M3.92,8.641l11.772-4.89L9.535,9.909L3.92,8.641z M11.358,16.078l-1.268-5.613l6.157-6.157L11.358,16.078z\"\n  })),\n  fieldoff: __jsx(\"svg\", {\n    className: \"svg-icon\",\n    viewBox: \"0 0 30 20\"\n  }, __jsx(\"path\", {\n    d: \"M10,1.375c-3.17,0-5.75,2.548-5.75,5.682c0,6.685,5.259,11.276,5.483,11.469c0.152,0.132,0.382,0.132,0.534,0c0.224-0.193,5.481-4.784,5.483-11.469C15.75,3.923,13.171,1.375,10,1.375 M10,17.653c-1.064-1.024-4.929-5.127-4.929-10.596c0-2.68,2.212-4.861,4.929-4.861s4.929,2.181,4.929,4.861C14.927,12.518,11.063,16.627,10,17.653 M10,3.839c-1.815,0-3.286,1.47-3.286,3.286s1.47,3.286,3.286,3.286s3.286-1.47,3.286-3.286S11.815,3.839,10,3.839 M10,9.589c-1.359,0-2.464-1.105-2.464-2.464S8.641,4.661,10,4.661s2.464,1.105,2.464,2.464S11.359,9.589,10,9.589\"\n  })),\n  login: __jsx(\"svg\", {\n    className: \"svg-icon\",\n    viewBox: \"0 0 20 20\"\n  }, __jsx(\"path\", {\n    d: \"M17.308,7.564h-1.993c0-2.929-2.385-5.314-5.314-5.314S4.686,4.635,4.686,7.564H2.693c-0.244,0-0.443,0.2-0.443,0.443v9.3c0,0.243,0.199,0.442,0.443,0.442h14.615c0.243,0,0.442-0.199,0.442-0.442v-9.3C17.75,7.764,17.551,7.564,17.308,7.564 M10,3.136c2.442,0,4.43,1.986,4.43,4.428H5.571C5.571,5.122,7.558,3.136,10,3.136 M16.865,16.864H3.136V8.45h13.729V16.864z M10,10.664c-0.854,0-1.55,0.696-1.55,1.551c0,0.699,0.467,1.292,1.107,1.485v0.95c0,0.243,0.2,0.442,0.443,0.442s0.443-0.199,0.443-0.442V13.7c0.64-0.193,1.106-0.786,1.106-1.485C11.55,11.36,10.854,10.664,10,10.664 M10,12.878c-0.366,0-0.664-0.298-0.664-0.663c0-0.366,0.298-0.665,0.664-0.665c0.365,0,0.664,0.299,0.664,0.665C10.664,12.58,10.365,12.878,10,12.878\"\n  }))\n};\nexport default Layout;","\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/register\",\n        function () {\n          return require(\"private-next-pages/register.js\");\n        }\n      ]);\n    "]}}